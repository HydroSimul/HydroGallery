// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/HydroGallery.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// subset_get
NumericVector subset_get(NumericVector vec_Data, IntegerVector int_Index);
static SEXP _HydroGallery_subset_get_try(SEXP vec_DataSEXP, SEXP int_IndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec_Data(vec_DataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type int_Index(int_IndexSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_get(vec_Data, int_Index));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_subset_get(SEXP vec_DataSEXP, SEXP int_IndexSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_subset_get_try(vec_DataSEXP, int_IndexSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// subset_get_logical
LogicalVector subset_get_logical(LogicalVector vec_Data, IntegerVector int_Index);
static SEXP _HydroGallery_subset_get_logical_try(SEXP vec_DataSEXP, SEXP int_IndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type vec_Data(vec_DataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type int_Index(int_IndexSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_get_logical(vec_Data, int_Index));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_subset_get_logical(SEXP vec_DataSEXP, SEXP int_IndexSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_subset_get_logical_try(vec_DataSEXP, int_IndexSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// subset_put
void subset_put(NumericVector& vec_Data, IntegerVector int_Index, NumericVector vec_DataPut);
static SEXP _HydroGallery_subset_put_try(SEXP vec_DataSEXP, SEXP int_IndexSEXP, SEXP vec_DataPutSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< NumericVector& >::type vec_Data(vec_DataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type int_Index(int_IndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_DataPut(vec_DataPutSEXP);
    subset_put(vec_Data, int_Index, vec_DataPut);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_subset_put(SEXP vec_DataSEXP, SEXP int_IndexSEXP, SEXP vec_DataPutSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_subset_put_try(vec_DataSEXP, int_IndexSEXP, vec_DataPutSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// subset_add
void subset_add(NumericVector& vec_Data, IntegerVector int_Index, NumericVector vec_DataAdd);
static SEXP _HydroGallery_subset_add_try(SEXP vec_DataSEXP, SEXP int_IndexSEXP, SEXP vec_DataAddSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< NumericVector& >::type vec_Data(vec_DataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type int_Index(int_IndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_DataAdd(vec_DataAddSEXP);
    subset_add(vec_Data, int_Index, vec_DataAdd);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_subset_add(SEXP vec_DataSEXP, SEXP int_IndexSEXP, SEXP vec_DataAddSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_subset_add_try(vec_DataSEXP, int_IndexSEXP, vec_DataAddSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// atmosSnow_ThresholdT
NumericVector atmosSnow_ThresholdT(NumericVector atmos_precipitation_mm, NumericVector atmos_temperature_Cel, NumericVector param_atmos_thr_Ts);
static SEXP _HydroGallery_atmosSnow_ThresholdT_try(SEXP atmos_precipitation_mmSEXP, SEXP atmos_temperature_CelSEXP, SEXP param_atmos_thr_TsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_precipitation_mm(atmos_precipitation_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atmos_temperature_Cel(atmos_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_atmos_thr_Ts(param_atmos_thr_TsSEXP);
    rcpp_result_gen = Rcpp::wrap(atmosSnow_ThresholdT(atmos_precipitation_mm, atmos_temperature_Cel, param_atmos_thr_Ts));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_atmosSnow_ThresholdT(SEXP atmos_precipitation_mmSEXP, SEXP atmos_temperature_CelSEXP, SEXP param_atmos_thr_TsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_atmosSnow_ThresholdT_try(atmos_precipitation_mmSEXP, atmos_temperature_CelSEXP, param_atmos_thr_TsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// atmosSnow_UBC
NumericVector atmosSnow_UBC(NumericVector atmos_precipitation_mm, NumericVector atmos_temperature_Cel, NumericVector param_atmos_ubc_A0FORM);
static SEXP _HydroGallery_atmosSnow_UBC_try(SEXP atmos_precipitation_mmSEXP, SEXP atmos_temperature_CelSEXP, SEXP param_atmos_ubc_A0FORMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_precipitation_mm(atmos_precipitation_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atmos_temperature_Cel(atmos_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_atmos_ubc_A0FORM(param_atmos_ubc_A0FORMSEXP);
    rcpp_result_gen = Rcpp::wrap(atmosSnow_UBC(atmos_precipitation_mm, atmos_temperature_Cel, param_atmos_ubc_A0FORM));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_atmosSnow_UBC(SEXP atmos_precipitation_mmSEXP, SEXP atmos_temperature_CelSEXP, SEXP param_atmos_ubc_A0FORMSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_atmosSnow_UBC_try(atmos_precipitation_mmSEXP, atmos_temperature_CelSEXP, param_atmos_ubc_A0FORMSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_GR4J
NumericVector baseflow_GR4J(NumericVector ground_water_mm, NumericVector ground_capacity_mm);
static SEXP _HydroGallery_baseflow_GR4J_try(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_capacity_mm(ground_capacity_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_GR4J(ground_water_mm, ground_capacity_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_GR4J(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_GR4J_try(ground_water_mmSEXP, ground_capacity_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_GR4Jfix
NumericVector baseflow_GR4Jfix(NumericVector ground_water_mm, NumericVector ground_capacity_mm, NumericVector param_baseflow_grf_gamma);
static SEXP _HydroGallery_baseflow_GR4Jfix_try(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP param_baseflow_grf_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_capacity_mm(ground_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_baseflow_grf_gamma(param_baseflow_grf_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_GR4Jfix(ground_water_mm, ground_capacity_mm, param_baseflow_grf_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_GR4Jfix(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP param_baseflow_grf_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_GR4Jfix_try(ground_water_mmSEXP, ground_capacity_mmSEXP, param_baseflow_grf_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_SupplyRatio
NumericVector baseflow_SupplyRatio(NumericVector ground_water_mm, NumericVector param_baseflow_sur_k);
static SEXP _HydroGallery_baseflow_SupplyRatio_try(SEXP ground_water_mmSEXP, SEXP param_baseflow_sur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_baseflow_sur_k(param_baseflow_sur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_SupplyRatio(ground_water_mm, param_baseflow_sur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_SupplyRatio(SEXP ground_water_mmSEXP, SEXP param_baseflow_sur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_SupplyRatio_try(ground_water_mmSEXP, param_baseflow_sur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_SupplyPow
NumericVector baseflow_SupplyPow(NumericVector ground_water_mm, NumericVector param_baseflow_sup_k, NumericVector param_baseflow_sup_gamma);
static SEXP _HydroGallery_baseflow_SupplyPow_try(SEXP ground_water_mmSEXP, SEXP param_baseflow_sup_kSEXP, SEXP param_baseflow_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_baseflow_sup_k(param_baseflow_sup_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_baseflow_sup_gamma(param_baseflow_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_SupplyPow(ground_water_mm, param_baseflow_sup_k, param_baseflow_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_SupplyPow(SEXP ground_water_mmSEXP, SEXP param_baseflow_sup_kSEXP, SEXP param_baseflow_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_SupplyPow_try(ground_water_mmSEXP, param_baseflow_sup_kSEXP, param_baseflow_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_MaxPow
NumericVector baseflow_MaxPow(NumericVector ground_water_mm, NumericVector ground_capacity_mm, NumericVector ground_potentialBaseflow_mm, NumericVector param_baseflow_map_gamma);
static SEXP _HydroGallery_baseflow_MaxPow_try(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialBaseflow_mmSEXP, SEXP param_baseflow_map_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_capacity_mm(ground_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_potentialBaseflow_mm(ground_potentialBaseflow_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_baseflow_map_gamma(param_baseflow_map_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_MaxPow(ground_water_mm, ground_capacity_mm, ground_potentialBaseflow_mm, param_baseflow_map_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_MaxPow(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialBaseflow_mmSEXP, SEXP param_baseflow_map_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_MaxPow_try(ground_water_mmSEXP, ground_capacity_mmSEXP, ground_potentialBaseflow_mmSEXP, param_baseflow_map_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_ThreshPow
NumericVector baseflow_ThreshPow(NumericVector ground_water_mm, NumericVector ground_capacity_mm, NumericVector ground_potentialBaseflow_mm, NumericVector param_baseflow_thp_thresh, NumericVector param_baseflow_thp_gamma);
static SEXP _HydroGallery_baseflow_ThreshPow_try(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialBaseflow_mmSEXP, SEXP param_baseflow_thp_threshSEXP, SEXP param_baseflow_thp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_capacity_mm(ground_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_potentialBaseflow_mm(ground_potentialBaseflow_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_baseflow_thp_thresh(param_baseflow_thp_threshSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_baseflow_thp_gamma(param_baseflow_thp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_ThreshPow(ground_water_mm, ground_capacity_mm, ground_potentialBaseflow_mm, param_baseflow_thp_thresh, param_baseflow_thp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_ThreshPow(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialBaseflow_mmSEXP, SEXP param_baseflow_thp_threshSEXP, SEXP param_baseflow_thp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_ThreshPow_try(ground_water_mmSEXP, ground_capacity_mmSEXP, ground_potentialBaseflow_mmSEXP, param_baseflow_thp_threshSEXP, param_baseflow_thp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_Arno
NumericVector baseflow_Arno(NumericVector ground_water_mm, NumericVector ground_capacity_mm, NumericVector ground_potentialBaseflow_mm, NumericVector param_baseflow_arn_thresh, NumericVector param_baseflow_arn_k);
static SEXP _HydroGallery_baseflow_Arno_try(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialBaseflow_mmSEXP, SEXP param_baseflow_arn_threshSEXP, SEXP param_baseflow_arn_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_capacity_mm(ground_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_potentialBaseflow_mm(ground_potentialBaseflow_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_baseflow_arn_thresh(param_baseflow_arn_threshSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_baseflow_arn_k(param_baseflow_arn_kSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_Arno(ground_water_mm, ground_capacity_mm, ground_potentialBaseflow_mm, param_baseflow_arn_thresh, param_baseflow_arn_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_Arno(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialBaseflow_mmSEXP, SEXP param_baseflow_arn_threshSEXP, SEXP param_baseflow_arn_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_Arno_try(ground_water_mmSEXP, ground_capacity_mmSEXP, ground_potentialBaseflow_mmSEXP, param_baseflow_arn_threshSEXP, param_baseflow_arn_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cali_DDS
List cali_DDS(Function fitness, List lst_OtherData, NumericVector x_Min, NumericVector x_Max, Nullable<NumericVector> x_Init, int max_iter, double r);
static SEXP _HydroGallery_cali_DDS_try(SEXP fitnessSEXP, SEXP lst_OtherDataSEXP, SEXP x_MinSEXP, SEXP x_MaxSEXP, SEXP x_InitSEXP, SEXP max_iterSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Function >::type fitness(fitnessSEXP);
    Rcpp::traits::input_parameter< List >::type lst_OtherData(lst_OtherDataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Min(x_MinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Max(x_MaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type x_Init(x_InitSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(cali_DDS(fitness, lst_OtherData, x_Min, x_Max, x_Init, max_iter, r));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_cali_DDS(SEXP fitnessSEXP, SEXP lst_OtherDataSEXP, SEXP x_MinSEXP, SEXP x_MaxSEXP, SEXP x_InitSEXP, SEXP max_iterSEXP, SEXP rSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_cali_DDS_try(fitnessSEXP, lst_OtherDataSEXP, x_MinSEXP, x_MaxSEXP, x_InitSEXP, max_iterSEXP, rSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// landLeafAreaIndex_WaterGAP3
NumericMatrix landLeafAreaIndex_WaterGAP3(NumericMatrix ATMOS_temperature_Cel, NumericMatrix ATMOS_precipitation_mm, NumericVector CELL_latitude_deg, IntegerVector LAND_growUpDay_d, NumericVector LAND_leafAreaIndexMin_, NumericVector LAND_leafAreaIndexMax_, IntegerVector Time_dayOfYear_d);
static SEXP _HydroGallery_landLeafAreaIndex_WaterGAP3_try(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_precipitation_mmSEXP, SEXP CELL_latitude_degSEXP, SEXP LAND_growUpDay_dSEXP, SEXP LAND_leafAreaIndexMin_SEXP, SEXP LAND_leafAreaIndexMax_SEXP, SEXP Time_dayOfYear_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ATMOS_precipitation_mm(ATMOS_precipitation_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CELL_latitude_deg(CELL_latitude_degSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type LAND_growUpDay_d(LAND_growUpDay_dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LAND_leafAreaIndexMin_(LAND_leafAreaIndexMin_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LAND_leafAreaIndexMax_(LAND_leafAreaIndexMax_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Time_dayOfYear_d(Time_dayOfYear_dSEXP);
    rcpp_result_gen = Rcpp::wrap(landLeafAreaIndex_WaterGAP3(ATMOS_temperature_Cel, ATMOS_precipitation_mm, CELL_latitude_deg, LAND_growUpDay_d, LAND_leafAreaIndexMin_, LAND_leafAreaIndexMax_, Time_dayOfYear_d));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_landLeafAreaIndex_WaterGAP3(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_precipitation_mmSEXP, SEXP CELL_latitude_degSEXP, SEXP LAND_growUpDay_dSEXP, SEXP LAND_leafAreaIndexMin_SEXP, SEXP LAND_leafAreaIndexMax_SEXP, SEXP Time_dayOfYear_dSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_landLeafAreaIndex_WaterGAP3_try(ATMOS_temperature_CelSEXP, ATMOS_precipitation_mmSEXP, CELL_latitude_degSEXP, LAND_growUpDay_dSEXP, LAND_leafAreaIndexMin_SEXP, LAND_leafAreaIndexMax_SEXP, Time_dayOfYear_dSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// capirise_HBV
NumericVector capirise_HBV(NumericVector ground_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector soil_potentialCapirise_mm);
static SEXP _HydroGallery_capirise_HBV_try(SEXP ground_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialCapirise_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_potentialCapirise_mm(soil_potentialCapirise_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(capirise_HBV(ground_water_mm, soil_water_mm, soil_capacity_mm, soil_potentialCapirise_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_capirise_HBV(SEXP ground_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialCapirise_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_capirise_HBV_try(ground_water_mmSEXP, soil_water_mmSEXP, soil_capacity_mmSEXP, soil_potentialCapirise_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// capirise_HBVfix
NumericVector capirise_HBVfix(NumericVector ground_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector soil_fieldCapacityPerc_1, NumericVector soil_potentialCapirise_mm);
static SEXP _HydroGallery_capirise_HBVfix_try(SEXP ground_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_fieldCapacityPerc_1SEXP, SEXP soil_potentialCapirise_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_fieldCapacityPerc_1(soil_fieldCapacityPerc_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_potentialCapirise_mm(soil_potentialCapirise_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(capirise_HBVfix(ground_water_mm, soil_water_mm, soil_capacity_mm, soil_fieldCapacityPerc_1, soil_potentialCapirise_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_capirise_HBVfix(SEXP ground_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_fieldCapacityPerc_1SEXP, SEXP soil_potentialCapirise_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_capirise_HBVfix_try(ground_water_mmSEXP, soil_water_mmSEXP, soil_capacity_mmSEXP, soil_fieldCapacityPerc_1SEXP, soil_potentialCapirise_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// capirise_AcceptRatio
NumericVector capirise_AcceptRatio(NumericVector ground_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector soil_fieldCapacityPerc_1, NumericVector param_capirise_acr_k);
static SEXP _HydroGallery_capirise_AcceptRatio_try(SEXP ground_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_fieldCapacityPerc_1SEXP, SEXP param_capirise_acr_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_fieldCapacityPerc_1(soil_fieldCapacityPerc_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_capirise_acr_k(param_capirise_acr_kSEXP);
    rcpp_result_gen = Rcpp::wrap(capirise_AcceptRatio(ground_water_mm, soil_water_mm, soil_capacity_mm, soil_fieldCapacityPerc_1, param_capirise_acr_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_capirise_AcceptRatio(SEXP ground_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_fieldCapacityPerc_1SEXP, SEXP param_capirise_acr_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_capirise_AcceptRatio_try(ground_water_mmSEXP, soil_water_mmSEXP, soil_capacity_mmSEXP, soil_fieldCapacityPerc_1SEXP, param_capirise_acr_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// capirise_AcceptPow
NumericVector capirise_AcceptPow(NumericVector ground_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector soil_fieldCapacityPerc_1, NumericVector param_capirise_acp_k, NumericVector param_capirise_acp_gamma);
static SEXP _HydroGallery_capirise_AcceptPow_try(SEXP ground_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_fieldCapacityPerc_1SEXP, SEXP param_capirise_acp_kSEXP, SEXP param_capirise_acp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_fieldCapacityPerc_1(soil_fieldCapacityPerc_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_capirise_acp_k(param_capirise_acp_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_capirise_acp_gamma(param_capirise_acp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(capirise_AcceptPow(ground_water_mm, soil_water_mm, soil_capacity_mm, soil_fieldCapacityPerc_1, param_capirise_acp_k, param_capirise_acp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_capirise_AcceptPow(SEXP ground_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_fieldCapacityPerc_1SEXP, SEXP param_capirise_acp_kSEXP, SEXP param_capirise_acp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_capirise_AcceptPow_try(ground_water_mmSEXP, soil_water_mmSEXP, soil_capacity_mmSEXP, soil_fieldCapacityPerc_1SEXP, param_capirise_acp_kSEXP, param_capirise_acp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_IUH
NumericVector confluen_IUH(NumericVector confluen_inputWater_mm, NumericVector confluen_iuh_1);
static SEXP _HydroGallery_confluen_IUH_try(SEXP confluen_inputWater_mmSEXP, SEXP confluen_iuh_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type confluen_inputWater_mm(confluen_inputWater_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type confluen_iuh_1(confluen_iuh_1SEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_IUH(confluen_inputWater_mm, confluen_iuh_1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluen_IUH(SEXP confluen_inputWater_mmSEXP, SEXP confluen_iuh_1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluen_IUH_try(confluen_inputWater_mmSEXP, confluen_iuh_1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_IUH2S
NumericVector confluen_IUH2S(NumericVector land_runoff_mm, NumericVector ground_baseflow_mm, NumericVector confluen_iuhLand_1, NumericVector confluen_iuhGround_1);
static SEXP _HydroGallery_confluen_IUH2S_try(SEXP land_runoff_mmSEXP, SEXP ground_baseflow_mmSEXP, SEXP confluen_iuhLand_1SEXP, SEXP confluen_iuhGround_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type land_runoff_mm(land_runoff_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_baseflow_mm(ground_baseflow_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type confluen_iuhLand_1(confluen_iuhLand_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type confluen_iuhGround_1(confluen_iuhGround_1SEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_IUH2S(land_runoff_mm, ground_baseflow_mm, confluen_iuhLand_1, confluen_iuhGround_1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluen_IUH2S(SEXP land_runoff_mmSEXP, SEXP ground_baseflow_mmSEXP, SEXP confluen_iuhLand_1SEXP, SEXP confluen_iuhGround_1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluen_IUH2S_try(land_runoff_mmSEXP, ground_baseflow_mmSEXP, confluen_iuhLand_1SEXP, confluen_iuhGround_1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_IUH3S
NumericVector confluen_IUH3S(NumericVector land_runoff_mm, NumericVector soil_interflow_mm, NumericVector ground_baseflow_mm, NumericVector confluen_iuhLand_1, NumericVector confluen_iuhSoil_1, NumericVector confluen_iuhGround_1);
static SEXP _HydroGallery_confluen_IUH3S_try(SEXP land_runoff_mmSEXP, SEXP soil_interflow_mmSEXP, SEXP ground_baseflow_mmSEXP, SEXP confluen_iuhLand_1SEXP, SEXP confluen_iuhSoil_1SEXP, SEXP confluen_iuhGround_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type land_runoff_mm(land_runoff_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_interflow_mm(soil_interflow_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_baseflow_mm(ground_baseflow_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type confluen_iuhLand_1(confluen_iuhLand_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type confluen_iuhSoil_1(confluen_iuhSoil_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type confluen_iuhGround_1(confluen_iuhGround_1SEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_IUH3S(land_runoff_mm, soil_interflow_mm, ground_baseflow_mm, confluen_iuhLand_1, confluen_iuhSoil_1, confluen_iuhGround_1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluen_IUH3S(SEXP land_runoff_mmSEXP, SEXP soil_interflow_mmSEXP, SEXP ground_baseflow_mmSEXP, SEXP confluen_iuhLand_1SEXP, SEXP confluen_iuhSoil_1SEXP, SEXP confluen_iuhGround_1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluen_IUH3S_try(land_runoff_mmSEXP, soil_interflow_mmSEXP, ground_baseflow_mmSEXP, confluen_iuhLand_1SEXP, confluen_iuhSoil_1SEXP, confluen_iuhGround_1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluenIUH_GR4J1
NumericVector confluenIUH_GR4J1(double confluen_responseTime_TS);
static SEXP _HydroGallery_confluenIUH_GR4J1_try(SEXP confluen_responseTime_TSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type confluen_responseTime_TS(confluen_responseTime_TSSEXP);
    rcpp_result_gen = Rcpp::wrap(confluenIUH_GR4J1(confluen_responseTime_TS));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluenIUH_GR4J1(SEXP confluen_responseTime_TSSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluenIUH_GR4J1_try(confluen_responseTime_TSSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluenIUH_GR4J2
NumericVector confluenIUH_GR4J2(double confluen_responseTime_TS);
static SEXP _HydroGallery_confluenIUH_GR4J2_try(SEXP confluen_responseTime_TSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type confluen_responseTime_TS(confluen_responseTime_TSSEXP);
    rcpp_result_gen = Rcpp::wrap(confluenIUH_GR4J2(confluen_responseTime_TS));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluenIUH_GR4J2(SEXP confluen_responseTime_TSSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluenIUH_GR4J2_try(confluen_responseTime_TSSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluenIUH_Kelly
NumericVector confluenIUH_Kelly(double confluen_responseTime_TS, double param_confluen_kel_k);
static SEXP _HydroGallery_confluenIUH_Kelly_try(SEXP confluen_responseTime_TSSEXP, SEXP param_confluen_kel_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type confluen_responseTime_TS(confluen_responseTime_TSSEXP);
    Rcpp::traits::input_parameter< double >::type param_confluen_kel_k(param_confluen_kel_kSEXP);
    rcpp_result_gen = Rcpp::wrap(confluenIUH_Kelly(confluen_responseTime_TS, param_confluen_kel_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluenIUH_Kelly(SEXP confluen_responseTime_TSSEXP, SEXP param_confluen_kel_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluenIUH_Kelly_try(confluen_responseTime_TSSEXP, param_confluen_kel_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluenIUH_Nash
NumericVector confluenIUH_Nash(double confluen_responseTime_TS, double param_confluen_nas_n);
static SEXP _HydroGallery_confluenIUH_Nash_try(SEXP confluen_responseTime_TSSEXP, SEXP param_confluen_nas_nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type confluen_responseTime_TS(confluen_responseTime_TSSEXP);
    Rcpp::traits::input_parameter< double >::type param_confluen_nas_n(param_confluen_nas_nSEXP);
    rcpp_result_gen = Rcpp::wrap(confluenIUH_Nash(confluen_responseTime_TS, param_confluen_nas_n));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluenIUH_Nash(SEXP confluen_responseTime_TSSEXP, SEXP param_confluen_nas_nSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluenIUH_Nash_try(confluen_responseTime_TSSEXP, param_confluen_nas_nSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluenIUH_Clark
NumericVector confluenIUH_Clark(double confluen_responseTime_TS);
static SEXP _HydroGallery_confluenIUH_Clark_try(SEXP confluen_responseTime_TSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type confluen_responseTime_TS(confluen_responseTime_TSSEXP);
    rcpp_result_gen = Rcpp::wrap(confluenIUH_Clark(confluen_responseTime_TS));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluenIUH_Clark(SEXP confluen_responseTime_TSSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluenIUH_Clark_try(confluen_responseTime_TSSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_WaterGAP3
NumericVector confluen_WaterGAP3(NumericVector& RIVER_water_m3, NumericVector RIVER_length_km, NumericVector RIVER_velocity_km, NumericVector RIVER_outflow_m3, List CELL_cellNumberStep_int, List CELL_inflowCellNumberStep_int);
static SEXP _HydroGallery_confluen_WaterGAP3_try(SEXP RIVER_water_m3SEXP, SEXP RIVER_length_kmSEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_outflow_m3SEXP, SEXP CELL_cellNumberStep_intSEXP, SEXP CELL_inflowCellNumberStep_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type RIVER_water_m3(RIVER_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RIVER_length_km(RIVER_length_kmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RIVER_velocity_km(RIVER_velocity_kmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RIVER_outflow_m3(RIVER_outflow_m3SEXP);
    Rcpp::traits::input_parameter< List >::type CELL_cellNumberStep_int(CELL_cellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< List >::type CELL_inflowCellNumberStep_int(CELL_inflowCellNumberStep_intSEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_WaterGAP3(RIVER_water_m3, RIVER_length_km, RIVER_velocity_km, RIVER_outflow_m3, CELL_cellNumberStep_int, CELL_inflowCellNumberStep_int));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluen_WaterGAP3(SEXP RIVER_water_m3SEXP, SEXP RIVER_length_kmSEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_outflow_m3SEXP, SEXP CELL_cellNumberStep_intSEXP, SEXP CELL_inflowCellNumberStep_intSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluen_WaterGAP3_try(RIVER_water_m3SEXP, RIVER_length_kmSEXP, RIVER_velocity_kmSEXP, RIVER_outflow_m3SEXP, CELL_cellNumberStep_intSEXP, CELL_inflowCellNumberStep_intSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_WaterGAP3_L
NumericVector confluen_WaterGAP3_L(NumericVector& RIVER_water_m3, NumericVector RIVER_length_km, NumericVector RIVER_velocity_km, NumericVector RIVER_outflow_m3, List CELL_cellNumberStep_int, List CELL_inflowCellNumberStep_int, IntegerVector Riverlak_cellNumber_int, NumericVector& Riverlak_water_m3, NumericVector Riverlak_capacity_m3, NumericVector param_Riverlak_lin_storeFactor);
static SEXP _HydroGallery_confluen_WaterGAP3_L_try(SEXP RIVER_water_m3SEXP, SEXP RIVER_length_kmSEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_outflow_m3SEXP, SEXP CELL_cellNumberStep_intSEXP, SEXP CELL_inflowCellNumberStep_intSEXP, SEXP Riverlak_cellNumber_intSEXP, SEXP Riverlak_water_m3SEXP, SEXP Riverlak_capacity_m3SEXP, SEXP param_Riverlak_lin_storeFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type RIVER_water_m3(RIVER_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RIVER_length_km(RIVER_length_kmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RIVER_velocity_km(RIVER_velocity_kmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RIVER_outflow_m3(RIVER_outflow_m3SEXP);
    Rcpp::traits::input_parameter< List >::type CELL_cellNumberStep_int(CELL_cellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< List >::type CELL_inflowCellNumberStep_int(CELL_inflowCellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Riverlak_cellNumber_int(Riverlak_cellNumber_intSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type Riverlak_water_m3(Riverlak_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Riverlak_capacity_m3(Riverlak_capacity_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_Riverlak_lin_storeFactor(param_Riverlak_lin_storeFactorSEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_WaterGAP3_L(RIVER_water_m3, RIVER_length_km, RIVER_velocity_km, RIVER_outflow_m3, CELL_cellNumberStep_int, CELL_inflowCellNumberStep_int, Riverlak_cellNumber_int, Riverlak_water_m3, Riverlak_capacity_m3, param_Riverlak_lin_storeFactor));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluen_WaterGAP3_L(SEXP RIVER_water_m3SEXP, SEXP RIVER_length_kmSEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_outflow_m3SEXP, SEXP CELL_cellNumberStep_intSEXP, SEXP CELL_inflowCellNumberStep_intSEXP, SEXP Riverlak_cellNumber_intSEXP, SEXP Riverlak_water_m3SEXP, SEXP Riverlak_capacity_m3SEXP, SEXP param_Riverlak_lin_storeFactorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluen_WaterGAP3_L_try(RIVER_water_m3SEXP, RIVER_length_kmSEXP, RIVER_velocity_kmSEXP, RIVER_outflow_m3SEXP, CELL_cellNumberStep_intSEXP, CELL_inflowCellNumberStep_intSEXP, Riverlak_cellNumber_intSEXP, Riverlak_water_m3SEXP, Riverlak_capacity_m3SEXP, param_Riverlak_lin_storeFactorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// eva_NSE
double eva_NSE(NumericVector num_Sim, NumericVector num_Obs);
static SEXP _HydroGallery_eva_NSE_try(SEXP num_SimSEXP, SEXP num_ObsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type num_Sim(num_SimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type num_Obs(num_ObsSEXP);
    rcpp_result_gen = Rcpp::wrap(eva_NSE(num_Sim, num_Obs));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_eva_NSE(SEXP num_SimSEXP, SEXP num_ObsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_eva_NSE_try(num_SimSEXP, num_ObsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// eva_KGE
double eva_KGE(NumericVector num_Sim, NumericVector num_Obs, double factor_r, double factor_alpha, double factor_beta);
static SEXP _HydroGallery_eva_KGE_try(SEXP num_SimSEXP, SEXP num_ObsSEXP, SEXP factor_rSEXP, SEXP factor_alphaSEXP, SEXP factor_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type num_Sim(num_SimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type num_Obs(num_ObsSEXP);
    Rcpp::traits::input_parameter< double >::type factor_r(factor_rSEXP);
    Rcpp::traits::input_parameter< double >::type factor_alpha(factor_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type factor_beta(factor_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(eva_KGE(num_Sim, num_Obs, factor_r, factor_alpha, factor_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_eva_KGE(SEXP num_SimSEXP, SEXP num_ObsSEXP, SEXP factor_rSEXP, SEXP factor_alphaSEXP, SEXP factor_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_eva_KGE_try(num_SimSEXP, num_ObsSEXP, factor_rSEXP, factor_alphaSEXP, factor_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransPotential_TurcWendling
NumericVector evatransPotential_TurcWendling(NumericVector atmos_temperature_Cel, NumericVector atmos_solarRadiat_MJ, NumericVector param_evatrans_tur_k);
static SEXP _HydroGallery_evatransPotential_TurcWendling_try(SEXP atmos_temperature_CelSEXP, SEXP atmos_solarRadiat_MJSEXP, SEXP param_evatrans_tur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_temperature_Cel(atmos_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atmos_solarRadiat_MJ(atmos_solarRadiat_MJSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_tur_k(param_evatrans_tur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransPotential_TurcWendling(atmos_temperature_Cel, atmos_solarRadiat_MJ, param_evatrans_tur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransPotential_TurcWendling(SEXP atmos_temperature_CelSEXP, SEXP atmos_solarRadiat_MJSEXP, SEXP param_evatrans_tur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransPotential_TurcWendling_try(atmos_temperature_CelSEXP, atmos_solarRadiat_MJSEXP, param_evatrans_tur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransPotential_Linacre
NumericVector evatransPotential_Linacre(NumericVector atmos_temperature_Cel, NumericVector atmos_relativeHumidity_1, NumericVector land_latitude_Degree, NumericVector land_elevation_m, NumericVector land_albedo_1);
static SEXP _HydroGallery_evatransPotential_Linacre_try(SEXP atmos_temperature_CelSEXP, SEXP atmos_relativeHumidity_1SEXP, SEXP land_latitude_DegreeSEXP, SEXP land_elevation_mSEXP, SEXP land_albedo_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_temperature_Cel(atmos_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atmos_relativeHumidity_1(atmos_relativeHumidity_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type land_latitude_Degree(land_latitude_DegreeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type land_elevation_m(land_elevation_mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type land_albedo_1(land_albedo_1SEXP);
    rcpp_result_gen = Rcpp::wrap(evatransPotential_Linacre(atmos_temperature_Cel, atmos_relativeHumidity_1, land_latitude_Degree, land_elevation_m, land_albedo_1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransPotential_Linacre(SEXP atmos_temperature_CelSEXP, SEXP atmos_relativeHumidity_1SEXP, SEXP land_latitude_DegreeSEXP, SEXP land_elevation_mSEXP, SEXP land_albedo_1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransPotential_Linacre_try(atmos_temperature_CelSEXP, atmos_relativeHumidity_1SEXP, land_latitude_DegreeSEXP, land_elevation_mSEXP, land_albedo_1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransPotential_FAO56
NumericVector evatransPotential_FAO56(NumericVector atmos_temperature_Cel, NumericVector atmos_vaporPress_hPa, NumericVector atmos_saturatVaporPress_hPa, NumericVector atmos_netRadiat_MJ, NumericVector atmos_windSpeed2m_m_s, NumericVector land_elevation_m);
static SEXP _HydroGallery_evatransPotential_FAO56_try(SEXP atmos_temperature_CelSEXP, SEXP atmos_vaporPress_hPaSEXP, SEXP atmos_saturatVaporPress_hPaSEXP, SEXP atmos_netRadiat_MJSEXP, SEXP atmos_windSpeed2m_m_sSEXP, SEXP land_elevation_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_temperature_Cel(atmos_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atmos_vaporPress_hPa(atmos_vaporPress_hPaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atmos_saturatVaporPress_hPa(atmos_saturatVaporPress_hPaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atmos_netRadiat_MJ(atmos_netRadiat_MJSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atmos_windSpeed2m_m_s(atmos_windSpeed2m_m_sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type land_elevation_m(land_elevation_mSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransPotential_FAO56(atmos_temperature_Cel, atmos_vaporPress_hPa, atmos_saturatVaporPress_hPa, atmos_netRadiat_MJ, atmos_windSpeed2m_m_s, land_elevation_m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransPotential_FAO56(SEXP atmos_temperature_CelSEXP, SEXP atmos_vaporPress_hPaSEXP, SEXP atmos_saturatVaporPress_hPaSEXP, SEXP atmos_netRadiat_MJSEXP, SEXP atmos_windSpeed2m_m_sSEXP, SEXP land_elevation_mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransPotential_FAO56_try(atmos_temperature_CelSEXP, atmos_vaporPress_hPaSEXP, atmos_saturatVaporPress_hPaSEXP, atmos_netRadiat_MJSEXP, atmos_windSpeed2m_m_sSEXP, land_elevation_mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_SupplyRatio
NumericVector evatransActual_SupplyRatio(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_sur_k);
static SEXP _HydroGallery_evatransActual_SupplyRatio_try(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_sur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_potentialEvatrans_mm(atmos_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_sur_k(param_evatrans_sur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_SupplyRatio(atmos_potentialEvatrans_mm, water_mm, capacity_mm, param_evatrans_sur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_SupplyRatio(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_sur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_SupplyRatio_try(atmos_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_evatrans_sur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_SupplyPow
NumericVector evatransActual_SupplyPow(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_sup_k, NumericVector param_evatrans_sup_gamma);
static SEXP _HydroGallery_evatransActual_SupplyPow_try(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_sup_kSEXP, SEXP param_evatrans_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_potentialEvatrans_mm(atmos_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_sup_k(param_evatrans_sup_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_sup_gamma(param_evatrans_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_SupplyPow(atmos_potentialEvatrans_mm, water_mm, capacity_mm, param_evatrans_sup_k, param_evatrans_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_SupplyPow(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_sup_kSEXP, SEXP param_evatrans_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_SupplyPow_try(atmos_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_evatrans_sup_kSEXP, param_evatrans_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_VIC
NumericVector evatransActual_VIC(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_vic_gamma);
static SEXP _HydroGallery_evatransActual_VIC_try(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_vic_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_potentialEvatrans_mm(atmos_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_vic_gamma(param_evatrans_vic_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_VIC(atmos_potentialEvatrans_mm, water_mm, capacity_mm, param_evatrans_vic_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_VIC(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_vic_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_VIC_try(atmos_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_evatrans_vic_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_GR4J
NumericVector evatransActual_GR4J(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm);
static SEXP _HydroGallery_evatransActual_GR4J_try(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_potentialEvatrans_mm(atmos_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type capacity_mm(capacity_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_GR4J(atmos_potentialEvatrans_mm, water_mm, capacity_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_GR4J(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_GR4J_try(atmos_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_UBC
NumericVector evatransActual_UBC(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_ubc_gamma);
static SEXP _HydroGallery_evatransActual_UBC_try(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_ubc_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_potentialEvatrans_mm(atmos_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_ubc_gamma(param_evatrans_ubc_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_UBC(atmos_potentialEvatrans_mm, water_mm, capacity_mm, param_evatrans_ubc_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_UBC(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_ubc_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_UBC_try(atmos_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_evatrans_ubc_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_LiangLand
NumericVector evatransActual_LiangLand(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_lia_gamma);
static SEXP _HydroGallery_evatransActual_LiangLand_try(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_lia_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_potentialEvatrans_mm(atmos_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_lia_gamma(param_evatrans_lia_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_LiangLand(atmos_potentialEvatrans_mm, water_mm, capacity_mm, param_evatrans_lia_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_LiangLand(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_lia_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_LiangLand_try(atmos_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_evatrans_lia_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_LiangSoil
NumericVector evatransActual_LiangSoil(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_lia_B);
static SEXP _HydroGallery_evatransActual_LiangSoil_try(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_lia_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_potentialEvatrans_mm(atmos_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_lia_B(param_evatrans_lia_BSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_LiangSoil(atmos_potentialEvatrans_mm, water_mm, capacity_mm, param_evatrans_lia_B));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_LiangSoil(SEXP atmos_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_lia_BSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_LiangSoil_try(atmos_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_evatrans_lia_BSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_WaterGAP3
NumericVector evatransActual_WaterGAP3(NumericVector ATMOS_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_EVATRANS_wat_petmax);
static SEXP _HydroGallery_evatransActual_WaterGAP3_try(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_wat_petmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ATMOS_potentialEvatrans_mm(ATMOS_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_EVATRANS_wat_petmax(param_EVATRANS_wat_petmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_WaterGAP3(ATMOS_potentialEvatrans_mm, water_mm, capacity_mm, param_EVATRANS_wat_petmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_WaterGAP3(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_wat_petmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_WaterGAP3_try(ATMOS_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_EVATRANS_wat_petmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_GR4J
NumericVector infilt_GR4J(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm);
static SEXP _HydroGallery_infilt_GR4J_try(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type land_water_mm(land_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_GR4J(land_water_mm, soil_water_mm, soil_capacity_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_GR4J(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_GR4J_try(land_water_mmSEXP, soil_water_mmSEXP, soil_capacity_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_UBC
NumericVector infilt_UBC(NumericVector land_water_mm, NumericVector land_impermeableFrac_1, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_ubc_P0AGEN);
static SEXP _HydroGallery_infilt_UBC_try(SEXP land_water_mmSEXP, SEXP land_impermeableFrac_1SEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_ubc_P0AGENSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type land_water_mm(land_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type land_impermeableFrac_1(land_impermeableFrac_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_ubc_P0AGEN(param_infilt_ubc_P0AGENSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_UBC(land_water_mm, land_impermeableFrac_1, soil_water_mm, soil_capacity_mm, param_infilt_ubc_P0AGEN));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_UBC(SEXP land_water_mmSEXP, SEXP land_impermeableFrac_1SEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_ubc_P0AGENSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_UBC_try(land_water_mmSEXP, land_impermeableFrac_1SEXP, soil_water_mmSEXP, soil_capacity_mmSEXP, param_infilt_ubc_P0AGENSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_SupplyRatio
NumericVector infilt_SupplyRatio(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_sur_k);
static SEXP _HydroGallery_infilt_SupplyRatio_try(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_sur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type land_water_mm(land_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_sur_k(param_infilt_sur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_SupplyRatio(land_water_mm, soil_water_mm, soil_capacity_mm, param_infilt_sur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_SupplyRatio(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_sur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_SupplyRatio_try(land_water_mmSEXP, soil_water_mmSEXP, soil_capacity_mmSEXP, param_infilt_sur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_AcceptRatio
NumericVector infilt_AcceptRatio(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_acr_k);
static SEXP _HydroGallery_infilt_AcceptRatio_try(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_acr_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type land_water_mm(land_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_acr_k(param_infilt_acr_kSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_AcceptRatio(land_water_mm, soil_water_mm, soil_capacity_mm, param_infilt_acr_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_AcceptRatio(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_acr_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_AcceptRatio_try(land_water_mmSEXP, soil_water_mmSEXP, soil_capacity_mmSEXP, param_infilt_acr_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_SupplyPow
NumericVector infilt_SupplyPow(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_sup_k, NumericVector param_infilt_sup_gamma);
static SEXP _HydroGallery_infilt_SupplyPow_try(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_sup_kSEXP, SEXP param_infilt_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type land_water_mm(land_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_sup_k(param_infilt_sup_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_sup_gamma(param_infilt_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_SupplyPow(land_water_mm, soil_water_mm, soil_capacity_mm, param_infilt_sup_k, param_infilt_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_SupplyPow(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_sup_kSEXP, SEXP param_infilt_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_SupplyPow_try(land_water_mmSEXP, soil_water_mmSEXP, soil_capacity_mmSEXP, param_infilt_sup_kSEXP, param_infilt_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_AcceptPow
NumericVector infilt_AcceptPow(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_acp_k, NumericVector param_infilt_acp_gamma);
static SEXP _HydroGallery_infilt_AcceptPow_try(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_acp_kSEXP, SEXP param_infilt_acp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type land_water_mm(land_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_acp_k(param_infilt_acp_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_acp_gamma(param_infilt_acp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_AcceptPow(land_water_mm, soil_water_mm, soil_capacity_mm, param_infilt_acp_k, param_infilt_acp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_AcceptPow(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_acp_kSEXP, SEXP param_infilt_acp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_AcceptPow_try(land_water_mmSEXP, soil_water_mmSEXP, soil_capacity_mmSEXP, param_infilt_acp_kSEXP, param_infilt_acp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_HBV
NumericVector infilt_HBV(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_hbv_beta);
static SEXP _HydroGallery_infilt_HBV_try(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_hbv_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type land_water_mm(land_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_hbv_beta(param_infilt_hbv_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_HBV(land_water_mm, soil_water_mm, soil_capacity_mm, param_infilt_hbv_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_HBV(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_hbv_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_HBV_try(land_water_mmSEXP, soil_water_mmSEXP, soil_capacity_mmSEXP, param_infilt_hbv_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_XAJ
NumericVector infilt_XAJ(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_xaj_B);
static SEXP _HydroGallery_infilt_XAJ_try(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_xaj_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type land_water_mm(land_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_xaj_B(param_infilt_xaj_BSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_XAJ(land_water_mm, soil_water_mm, soil_capacity_mm, param_infilt_xaj_B));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_XAJ(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_xaj_BSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_XAJ_try(land_water_mmSEXP, soil_water_mmSEXP, soil_capacity_mmSEXP, param_infilt_xaj_BSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_VIC
NumericVector infilt_VIC(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_vic_B);
static SEXP _HydroGallery_infilt_VIC_try(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_vic_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type land_water_mm(land_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_vic_B(param_infilt_vic_BSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_VIC(land_water_mm, soil_water_mm, soil_capacity_mm, param_infilt_vic_B));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_VIC(SEXP land_water_mmSEXP, SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_infilt_vic_BSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_VIC_try(land_water_mmSEXP, soil_water_mmSEXP, soil_capacity_mmSEXP, param_infilt_vic_BSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_GR4Jfix
NumericVector inteflow_GR4Jfix(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_inteflow_grf_k, NumericVector param_inteflow_grf_gamma);
static SEXP _HydroGallery_inteflow_GR4Jfix_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_inteflow_grf_kSEXP, SEXP param_inteflow_grf_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_inteflow_grf_k(param_inteflow_grf_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_inteflow_grf_gamma(param_inteflow_grf_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_GR4Jfix(soil_water_mm, soil_capacity_mm, param_inteflow_grf_k, param_inteflow_grf_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_GR4Jfix(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_inteflow_grf_kSEXP, SEXP param_inteflow_grf_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_GR4Jfix_try(soil_water_mmSEXP, soil_capacity_mmSEXP, param_inteflow_grf_kSEXP, param_inteflow_grf_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_MaxPow
NumericVector inteflow_MaxPow(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector soil_potentialInteflow_mm, NumericVector param_inteflow_map_gamma);
static SEXP _HydroGallery_inteflow_MaxPow_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialInteflow_mmSEXP, SEXP param_inteflow_map_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_potentialInteflow_mm(soil_potentialInteflow_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_inteflow_map_gamma(param_inteflow_map_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_MaxPow(soil_water_mm, soil_capacity_mm, soil_potentialInteflow_mm, param_inteflow_map_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_MaxPow(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialInteflow_mmSEXP, SEXP param_inteflow_map_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_MaxPow_try(soil_water_mmSEXP, soil_capacity_mmSEXP, soil_potentialInteflow_mmSEXP, param_inteflow_map_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_ThreshPow
NumericVector inteflow_ThreshPow(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector soil_potentialInteflow_mm, NumericVector param_inteflow_thp_thresh, NumericVector param_inteflow_thp_gamma);
static SEXP _HydroGallery_inteflow_ThreshPow_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialInteflow_mmSEXP, SEXP param_inteflow_thp_threshSEXP, SEXP param_inteflow_thp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_potentialInteflow_mm(soil_potentialInteflow_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_inteflow_thp_thresh(param_inteflow_thp_threshSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_inteflow_thp_gamma(param_inteflow_thp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_ThreshPow(soil_water_mm, soil_capacity_mm, soil_potentialInteflow_mm, param_inteflow_thp_thresh, param_inteflow_thp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_ThreshPow(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialInteflow_mmSEXP, SEXP param_inteflow_thp_threshSEXP, SEXP param_inteflow_thp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_ThreshPow_try(soil_water_mmSEXP, soil_capacity_mmSEXP, soil_potentialInteflow_mmSEXP, param_inteflow_thp_threshSEXP, param_inteflow_thp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_Arno
NumericVector inteflow_Arno(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector soil_potentialInteflow_mm, NumericVector param_inteflow_arn_thresh, NumericVector param_inteflow_arn_k);
static SEXP _HydroGallery_inteflow_Arno_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialInteflow_mmSEXP, SEXP param_inteflow_arn_threshSEXP, SEXP param_inteflow_arn_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_potentialInteflow_mm(soil_potentialInteflow_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_inteflow_arn_thresh(param_inteflow_arn_threshSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_inteflow_arn_k(param_inteflow_arn_kSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_Arno(soil_water_mm, soil_capacity_mm, soil_potentialInteflow_mm, param_inteflow_arn_thresh, param_inteflow_arn_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_Arno(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialInteflow_mmSEXP, SEXP param_inteflow_arn_threshSEXP, SEXP param_inteflow_arn_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_Arno_try(soil_water_mmSEXP, soil_capacity_mmSEXP, soil_potentialInteflow_mmSEXP, param_inteflow_arn_threshSEXP, param_inteflow_arn_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_BevenWood
NumericVector inteflow_BevenWood(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector soil_fieldCapacityPerc_1, NumericVector soil_potentialInteflow_mm);
static SEXP _HydroGallery_inteflow_BevenWood_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_fieldCapacityPerc_1SEXP, SEXP soil_potentialInteflow_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_fieldCapacityPerc_1(soil_fieldCapacityPerc_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_potentialInteflow_mm(soil_potentialInteflow_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_BevenWood(soil_water_mm, soil_capacity_mm, soil_fieldCapacityPerc_1, soil_potentialInteflow_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_BevenWood(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_fieldCapacityPerc_1SEXP, SEXP soil_potentialInteflow_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_BevenWood_try(soil_water_mmSEXP, soil_capacity_mmSEXP, soil_fieldCapacityPerc_1SEXP, soil_potentialInteflow_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_SupplyPow0
NumericVector inteflow_SupplyPow0(NumericVector soil_water_mm, NumericVector param_inteflow_sp0_k, NumericVector param_inteflow_sp0_gamma);
static SEXP _HydroGallery_inteflow_SupplyPow0_try(SEXP soil_water_mmSEXP, SEXP param_inteflow_sp0_kSEXP, SEXP param_inteflow_sp0_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_inteflow_sp0_k(param_inteflow_sp0_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_inteflow_sp0_gamma(param_inteflow_sp0_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_SupplyPow0(soil_water_mm, param_inteflow_sp0_k, param_inteflow_sp0_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_SupplyPow0(SEXP soil_water_mmSEXP, SEXP param_inteflow_sp0_kSEXP, SEXP param_inteflow_sp0_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_SupplyPow0_try(soil_water_mmSEXP, param_inteflow_sp0_kSEXP, param_inteflow_sp0_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_SupplyPow
NumericVector inteflow_SupplyPow(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_inteflow_sup_k, NumericVector param_inteflow_sup_gamma);
static SEXP _HydroGallery_inteflow_SupplyPow_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_inteflow_sup_kSEXP, SEXP param_inteflow_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_inteflow_sup_k(param_inteflow_sup_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_inteflow_sup_gamma(param_inteflow_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_SupplyPow(soil_water_mm, soil_capacity_mm, param_inteflow_sup_k, param_inteflow_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_SupplyPow(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_inteflow_sup_kSEXP, SEXP param_inteflow_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_SupplyPow_try(soil_water_mmSEXP, soil_capacity_mmSEXP, param_inteflow_sup_kSEXP, param_inteflow_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_SupplyRatio
NumericVector inteflow_SupplyRatio(NumericVector soil_water_mm, NumericVector param_inteflow_sur_k);
static SEXP _HydroGallery_inteflow_SupplyRatio_try(SEXP soil_water_mmSEXP, SEXP param_inteflow_sur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_inteflow_sur_k(param_inteflow_sur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_SupplyRatio(soil_water_mm, param_inteflow_sur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_SupplyRatio(SEXP soil_water_mmSEXP, SEXP param_inteflow_sur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_SupplyRatio_try(soil_water_mmSEXP, param_inteflow_sur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// intercep_Full
NumericVector intercep_Full(NumericVector atmos_precipitation_mm, NumericVector land_interceptWater_mm, NumericVector land_interceptCapacity_mm);
static SEXP _HydroGallery_intercep_Full_try(SEXP atmos_precipitation_mmSEXP, SEXP land_interceptWater_mmSEXP, SEXP land_interceptCapacity_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type atmos_precipitation_mm(atmos_precipitation_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type land_interceptWater_mm(land_interceptWater_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type land_interceptCapacity_mm(land_interceptCapacity_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(intercep_Full(atmos_precipitation_mm, land_interceptWater_mm, land_interceptCapacity_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_intercep_Full(SEXP atmos_precipitation_mmSEXP, SEXP land_interceptWater_mmSEXP, SEXP land_interceptCapacity_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_intercep_Full_try(atmos_precipitation_mmSEXP, land_interceptWater_mmSEXP, land_interceptCapacity_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lake_AcceptPow
NumericVector lake_AcceptPow(NumericVector Lake_water_m3, NumericVector Lake_capacity_m3, NumericVector param_Lake_acp_storeFactor, NumericVector param_Lake_acp_gamma);
static SEXP _HydroGallery_lake_AcceptPow_try(SEXP Lake_water_m3SEXP, SEXP Lake_capacity_m3SEXP, SEXP param_Lake_acp_storeFactorSEXP, SEXP param_Lake_acp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Lake_water_m3(Lake_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Lake_capacity_m3(Lake_capacity_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_Lake_acp_storeFactor(param_Lake_acp_storeFactorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_Lake_acp_gamma(param_Lake_acp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(lake_AcceptPow(Lake_water_m3, Lake_capacity_m3, param_Lake_acp_storeFactor, param_Lake_acp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lake_AcceptPow(SEXP Lake_water_m3SEXP, SEXP Lake_capacity_m3SEXP, SEXP param_Lake_acp_storeFactorSEXP, SEXP param_Lake_acp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lake_AcceptPow_try(Lake_water_m3SEXP, Lake_capacity_m3SEXP, param_Lake_acp_storeFactorSEXP, param_Lake_acp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lateral_SupplyPow
NumericVector lateral_SupplyPow(NumericVector ground_water_mm, NumericVector ground_capacity_mm, NumericVector param_lateral_sup_k, NumericVector param_lateral_sup_gamma);
static SEXP _HydroGallery_lateral_SupplyPow_try(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP param_lateral_sup_kSEXP, SEXP param_lateral_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_capacity_mm(ground_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_lateral_sup_k(param_lateral_sup_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_lateral_sup_gamma(param_lateral_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(lateral_SupplyPow(ground_water_mm, ground_capacity_mm, param_lateral_sup_k, param_lateral_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lateral_SupplyPow(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP param_lateral_sup_kSEXP, SEXP param_lateral_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lateral_SupplyPow_try(ground_water_mmSEXP, ground_capacity_mmSEXP, param_lateral_sup_kSEXP, param_lateral_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lateral_SupplyRatio
NumericVector lateral_SupplyRatio(NumericVector ground_water_mm, NumericVector param_lateral_sur_k);
static SEXP _HydroGallery_lateral_SupplyRatio_try(SEXP ground_water_mmSEXP, SEXP param_lateral_sur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_lateral_sur_k(param_lateral_sur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(lateral_SupplyRatio(ground_water_mm, param_lateral_sur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lateral_SupplyRatio(SEXP ground_water_mmSEXP, SEXP param_lateral_sur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lateral_SupplyRatio_try(ground_water_mmSEXP, param_lateral_sur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lateral_GR4J
NumericVector lateral_GR4J(NumericVector ground_water_mm, NumericVector ground_capacity_mm, NumericVector ground_potentialLateral_mm);
static SEXP _HydroGallery_lateral_GR4J_try(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialLateral_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_capacity_mm(ground_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_potentialLateral_mm(ground_potentialLateral_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(lateral_GR4J(ground_water_mm, ground_capacity_mm, ground_potentialLateral_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lateral_GR4J(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialLateral_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lateral_GR4J_try(ground_water_mmSEXP, ground_capacity_mmSEXP, ground_potentialLateral_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lateral_GR4Jfix
NumericVector lateral_GR4Jfix(NumericVector ground_water_mm, NumericVector ground_capacity_mm, NumericVector ground_potentialLateral_mm, NumericVector param_lateral_grf_gamma);
static SEXP _HydroGallery_lateral_GR4Jfix_try(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialLateral_mmSEXP, SEXP param_lateral_grf_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_capacity_mm(ground_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_potentialLateral_mm(ground_potentialLateral_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_lateral_grf_gamma(param_lateral_grf_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(lateral_GR4Jfix(ground_water_mm, ground_capacity_mm, ground_potentialLateral_mm, param_lateral_grf_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lateral_GR4Jfix(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialLateral_mmSEXP, SEXP param_lateral_grf_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lateral_GR4Jfix_try(ground_water_mmSEXP, ground_capacity_mmSEXP, ground_potentialLateral_mmSEXP, param_lateral_grf_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lateral_ThreshPow
NumericVector lateral_ThreshPow(NumericVector ground_water_mm, NumericVector ground_capacity_mm, NumericVector ground_potentialLateral_mm, NumericVector param_lateral_thp_thresh, NumericVector param_lateral_thp_gamma);
static SEXP _HydroGallery_lateral_ThreshPow_try(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialLateral_mmSEXP, SEXP param_lateral_thp_threshSEXP, SEXP param_lateral_thp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_capacity_mm(ground_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_potentialLateral_mm(ground_potentialLateral_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_lateral_thp_thresh(param_lateral_thp_threshSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_lateral_thp_gamma(param_lateral_thp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(lateral_ThreshPow(ground_water_mm, ground_capacity_mm, ground_potentialLateral_mm, param_lateral_thp_thresh, param_lateral_thp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lateral_ThreshPow(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialLateral_mmSEXP, SEXP param_lateral_thp_threshSEXP, SEXP param_lateral_thp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lateral_ThreshPow_try(ground_water_mmSEXP, ground_capacity_mmSEXP, ground_potentialLateral_mmSEXP, param_lateral_thp_threshSEXP, param_lateral_thp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lateral_Arno
NumericVector lateral_Arno(NumericVector ground_water_mm, NumericVector ground_capacity_mm, NumericVector ground_potentialLateral_mm, NumericVector param_lateral_arn_thresh, NumericVector param_lateral_arn_k);
static SEXP _HydroGallery_lateral_Arno_try(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialLateral_mmSEXP, SEXP param_lateral_arn_threshSEXP, SEXP param_lateral_arn_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ground_water_mm(ground_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_capacity_mm(ground_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ground_potentialLateral_mm(ground_potentialLateral_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_lateral_arn_thresh(param_lateral_arn_threshSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_lateral_arn_k(param_lateral_arn_kSEXP);
    rcpp_result_gen = Rcpp::wrap(lateral_Arno(ground_water_mm, ground_capacity_mm, ground_potentialLateral_mm, param_lateral_arn_thresh, param_lateral_arn_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lateral_Arno(SEXP ground_water_mmSEXP, SEXP ground_capacity_mmSEXP, SEXP ground_potentialLateral_mmSEXP, SEXP param_lateral_arn_threshSEXP, SEXP param_lateral_arn_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lateral_Arno_try(ground_water_mmSEXP, ground_capacity_mmSEXP, ground_potentialLateral_mmSEXP, param_lateral_arn_threshSEXP, param_lateral_arn_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_GR4J
NumericVector percola_GR4J(NumericVector soil_water_mm, NumericVector soil_capacity_mm);
static SEXP _HydroGallery_percola_GR4J_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_GR4J(soil_water_mm, soil_capacity_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_GR4J(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_GR4J_try(soil_water_mmSEXP, soil_capacity_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_GR4Jfix
NumericVector percola_GR4Jfix(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_percola_grf_k);
static SEXP _HydroGallery_percola_GR4Jfix_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_percola_grf_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_grf_k(param_percola_grf_kSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_GR4Jfix(soil_water_mm, soil_capacity_mm, param_percola_grf_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_GR4Jfix(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_percola_grf_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_GR4Jfix_try(soil_water_mmSEXP, soil_capacity_mmSEXP, param_percola_grf_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_MaxPow
NumericVector percola_MaxPow(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector soil_potentialPercola_mm, NumericVector param_percola_map_gamma);
static SEXP _HydroGallery_percola_MaxPow_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialPercola_mmSEXP, SEXP param_percola_map_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_potentialPercola_mm(soil_potentialPercola_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_map_gamma(param_percola_map_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_MaxPow(soil_water_mm, soil_capacity_mm, soil_potentialPercola_mm, param_percola_map_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_MaxPow(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialPercola_mmSEXP, SEXP param_percola_map_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_MaxPow_try(soil_water_mmSEXP, soil_capacity_mmSEXP, soil_potentialPercola_mmSEXP, param_percola_map_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_ThreshPow
NumericVector percola_ThreshPow(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector soil_potentialPercola_mm, NumericVector param_percola_thp_thresh, NumericVector param_percola_thp_gamma);
static SEXP _HydroGallery_percola_ThreshPow_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialPercola_mmSEXP, SEXP param_percola_thp_threshSEXP, SEXP param_percola_thp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_potentialPercola_mm(soil_potentialPercola_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_thp_thresh(param_percola_thp_threshSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_thp_gamma(param_percola_thp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_ThreshPow(soil_water_mm, soil_capacity_mm, soil_potentialPercola_mm, param_percola_thp_thresh, param_percola_thp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_ThreshPow(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialPercola_mmSEXP, SEXP param_percola_thp_threshSEXP, SEXP param_percola_thp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_ThreshPow_try(soil_water_mmSEXP, soil_capacity_mmSEXP, soil_potentialPercola_mmSEXP, param_percola_thp_threshSEXP, param_percola_thp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_Arno
NumericVector percola_Arno(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector soil_potentialPercola_mm, NumericVector param_percola_arn_thresh, NumericVector param_percola_arn_k);
static SEXP _HydroGallery_percola_Arno_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialPercola_mmSEXP, SEXP param_percola_arn_threshSEXP, SEXP param_percola_arn_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_potentialPercola_mm(soil_potentialPercola_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_arn_thresh(param_percola_arn_threshSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_arn_k(param_percola_arn_kSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_Arno(soil_water_mm, soil_capacity_mm, soil_potentialPercola_mm, param_percola_arn_thresh, param_percola_arn_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_Arno(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_potentialPercola_mmSEXP, SEXP param_percola_arn_threshSEXP, SEXP param_percola_arn_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_Arno_try(soil_water_mmSEXP, soil_capacity_mmSEXP, soil_potentialPercola_mmSEXP, param_percola_arn_threshSEXP, param_percola_arn_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_BevenWood
NumericVector percola_BevenWood(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector soil_fieldCapacityPerc_1, NumericVector soil_potentialPercola_mm);
static SEXP _HydroGallery_percola_BevenWood_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_fieldCapacityPerc_1SEXP, SEXP soil_potentialPercola_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_fieldCapacityPerc_1(soil_fieldCapacityPerc_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_potentialPercola_mm(soil_potentialPercola_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_BevenWood(soil_water_mm, soil_capacity_mm, soil_fieldCapacityPerc_1, soil_potentialPercola_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_BevenWood(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP soil_fieldCapacityPerc_1SEXP, SEXP soil_potentialPercola_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_BevenWood_try(soil_water_mmSEXP, soil_capacity_mmSEXP, soil_fieldCapacityPerc_1SEXP, soil_potentialPercola_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_SupplyPow
NumericVector percola_SupplyPow(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_percola_sup_k, NumericVector param_percola_sup_gamma);
static SEXP _HydroGallery_percola_SupplyPow_try(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_percola_sup_kSEXP, SEXP param_percola_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soil_capacity_mm(soil_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_sup_k(param_percola_sup_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_sup_gamma(param_percola_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_SupplyPow(soil_water_mm, soil_capacity_mm, param_percola_sup_k, param_percola_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_SupplyPow(SEXP soil_water_mmSEXP, SEXP soil_capacity_mmSEXP, SEXP param_percola_sup_kSEXP, SEXP param_percola_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_SupplyPow_try(soil_water_mmSEXP, soil_capacity_mmSEXP, param_percola_sup_kSEXP, param_percola_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_SupplyRatio
NumericVector percola_SupplyRatio(NumericVector soil_water_mm, NumericVector param_percola_sur_k);
static SEXP _HydroGallery_percola_SupplyRatio_try(SEXP soil_water_mmSEXP, SEXP param_percola_sur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soil_water_mm(soil_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_sur_k(param_percola_sur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_SupplyRatio(soil_water_mm, param_percola_sur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_SupplyRatio(SEXP soil_water_mmSEXP, SEXP param_percola_sur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_SupplyRatio_try(soil_water_mmSEXP, param_percola_sur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_WaterGAP3
NumericVector percola_WaterGAP3(NumericVector Land_water_mm, NumericVector SOIL_potentialPercola_mm, LogicalVector param_PERCOLA_wat_01, NumericVector param_PERCOLA_wat_thresh, NumericVector param_PERCOLA_wat_k);
static SEXP _HydroGallery_percola_WaterGAP3_try(SEXP Land_water_mmSEXP, SEXP SOIL_potentialPercola_mmSEXP, SEXP param_PERCOLA_wat_01SEXP, SEXP param_PERCOLA_wat_threshSEXP, SEXP param_PERCOLA_wat_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Land_water_mm(Land_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SOIL_potentialPercola_mm(SOIL_potentialPercola_mmSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type param_PERCOLA_wat_01(param_PERCOLA_wat_01SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_PERCOLA_wat_thresh(param_PERCOLA_wat_threshSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_PERCOLA_wat_k(param_PERCOLA_wat_kSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_WaterGAP3(Land_water_mm, SOIL_potentialPercola_mm, param_PERCOLA_wat_01, param_PERCOLA_wat_thresh, param_PERCOLA_wat_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_WaterGAP3(SEXP Land_water_mmSEXP, SEXP SOIL_potentialPercola_mmSEXP, SEXP param_PERCOLA_wat_01SEXP, SEXP param_PERCOLA_wat_threshSEXP, SEXP param_PERCOLA_wat_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_WaterGAP3_try(Land_water_mmSEXP, SOIL_potentialPercola_mmSEXP, param_PERCOLA_wat_01SEXP, param_PERCOLA_wat_threshSEXP, param_PERCOLA_wat_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// river_LinearResorvoir
NumericVector river_LinearResorvoir(NumericVector RIVER_water_m3, NumericVector RIVER_inflow_m3, NumericVector RIVER_velocity_km, NumericVector RIVER_length_km);
static SEXP _HydroGallery_river_LinearResorvoir_try(SEXP RIVER_water_m3SEXP, SEXP RIVER_inflow_m3SEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_length_kmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type RIVER_water_m3(RIVER_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RIVER_inflow_m3(RIVER_inflow_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RIVER_velocity_km(RIVER_velocity_kmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RIVER_length_km(RIVER_length_kmSEXP);
    rcpp_result_gen = Rcpp::wrap(river_LinearResorvoir(RIVER_water_m3, RIVER_inflow_m3, RIVER_velocity_km, RIVER_length_km));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_river_LinearResorvoir(SEXP RIVER_water_m3SEXP, SEXP RIVER_inflow_m3SEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_length_kmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_river_LinearResorvoir_try(RIVER_water_m3SEXP, RIVER_inflow_m3SEXP, RIVER_velocity_kmSEXP, RIVER_length_kmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// riverlak_LinearResorvoir
NumericVector riverlak_LinearResorvoir(NumericVector Riverlak_water_m3, NumericVector Riverlak_inflow_m3, NumericVector Riverlak_capacity_m3, NumericVector param_Riverlak_lin_storeFactor);
static SEXP _HydroGallery_riverlak_LinearResorvoir_try(SEXP Riverlak_water_m3SEXP, SEXP Riverlak_inflow_m3SEXP, SEXP Riverlak_capacity_m3SEXP, SEXP param_Riverlak_lin_storeFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Riverlak_water_m3(Riverlak_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Riverlak_inflow_m3(Riverlak_inflow_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Riverlak_capacity_m3(Riverlak_capacity_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_Riverlak_lin_storeFactor(param_Riverlak_lin_storeFactorSEXP);
    rcpp_result_gen = Rcpp::wrap(riverlak_LinearResorvoir(Riverlak_water_m3, Riverlak_inflow_m3, Riverlak_capacity_m3, param_Riverlak_lin_storeFactor));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_riverlak_LinearResorvoir(SEXP Riverlak_water_m3SEXP, SEXP Riverlak_inflow_m3SEXP, SEXP Riverlak_capacity_m3SEXP, SEXP param_Riverlak_lin_storeFactorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_riverlak_LinearResorvoir_try(Riverlak_water_m3SEXP, Riverlak_inflow_m3SEXP, Riverlak_capacity_m3SEXP, param_Riverlak_lin_storeFactorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// snowMelt_Kustas
NumericVector snowMelt_Kustas(NumericVector snow_ice_mm, NumericVector atmos_temperature_Cel, NumericVector atmos_netRadiat_MJ, NumericVector param_snow_kus_fE, NumericVector param_snow_kus_fT);
static SEXP _HydroGallery_snowMelt_Kustas_try(SEXP snow_ice_mmSEXP, SEXP atmos_temperature_CelSEXP, SEXP atmos_netRadiat_MJSEXP, SEXP param_snow_kus_fESEXP, SEXP param_snow_kus_fTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type snow_ice_mm(snow_ice_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atmos_temperature_Cel(atmos_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atmos_netRadiat_MJ(atmos_netRadiat_MJSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_snow_kus_fE(param_snow_kus_fESEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_snow_kus_fT(param_snow_kus_fTSEXP);
    rcpp_result_gen = Rcpp::wrap(snowMelt_Kustas(snow_ice_mm, atmos_temperature_Cel, atmos_netRadiat_MJ, param_snow_kus_fE, param_snow_kus_fT));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_snowMelt_Kustas(SEXP snow_ice_mmSEXP, SEXP atmos_temperature_CelSEXP, SEXP atmos_netRadiat_MJSEXP, SEXP param_snow_kus_fESEXP, SEXP param_snow_kus_fTSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_snowMelt_Kustas_try(snow_ice_mmSEXP, atmos_temperature_CelSEXP, atmos_netRadiat_MJSEXP, param_snow_kus_fESEXP, param_snow_kus_fTSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// snowMelt_Factor
NumericVector snowMelt_Factor(NumericVector snow_ice_mm, NumericVector atmos_temperature_Cel, NumericVector param_snow_fac_f, NumericVector param_snow_fac_Tmelt);
static SEXP _HydroGallery_snowMelt_Factor_try(SEXP snow_ice_mmSEXP, SEXP atmos_temperature_CelSEXP, SEXP param_snow_fac_fSEXP, SEXP param_snow_fac_TmeltSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type snow_ice_mm(snow_ice_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atmos_temperature_Cel(atmos_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_snow_fac_f(param_snow_fac_fSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_snow_fac_Tmelt(param_snow_fac_TmeltSEXP);
    rcpp_result_gen = Rcpp::wrap(snowMelt_Factor(snow_ice_mm, atmos_temperature_Cel, param_snow_fac_f, param_snow_fac_Tmelt));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_snowMelt_Factor(SEXP snow_ice_mmSEXP, SEXP atmos_temperature_CelSEXP, SEXP param_snow_fac_fSEXP, SEXP param_snow_fac_TmeltSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_snowMelt_Factor_try(snow_ice_mmSEXP, atmos_temperature_CelSEXP, param_snow_fac_fSEXP, param_snow_fac_TmeltSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _HydroGallery_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("NumericVector(*subset_get)(NumericVector,IntegerVector)");
        signatures.insert("LogicalVector(*subset_get_logical)(LogicalVector,IntegerVector)");
        signatures.insert("void(*subset_put)(NumericVector&,IntegerVector,NumericVector)");
        signatures.insert("void(*subset_add)(NumericVector&,IntegerVector,NumericVector)");
        signatures.insert("NumericVector(*atmosSnow_ThresholdT)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*atmosSnow_UBC)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*baseflow_GR4J)(NumericVector,NumericVector)");
        signatures.insert("NumericVector(*baseflow_GR4Jfix)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*baseflow_SupplyRatio)(NumericVector,NumericVector)");
        signatures.insert("NumericVector(*baseflow_SupplyPow)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*baseflow_MaxPow)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*baseflow_ThreshPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*baseflow_Arno)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("List(*cali_DDS)(Function,List,NumericVector,NumericVector,Nullable<NumericVector>,int,double)");
        signatures.insert("NumericMatrix(*landLeafAreaIndex_WaterGAP3)(NumericMatrix,NumericMatrix,NumericVector,IntegerVector,NumericVector,NumericVector,IntegerVector)");
        signatures.insert("NumericVector(*capirise_HBV)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*capirise_HBVfix)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*capirise_AcceptRatio)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*capirise_AcceptPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*confluen_IUH)(NumericVector,NumericVector)");
        signatures.insert("NumericVector(*confluen_IUH2S)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*confluen_IUH3S)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*confluenIUH_GR4J1)(double)");
        signatures.insert("NumericVector(*confluenIUH_GR4J2)(double)");
        signatures.insert("NumericVector(*confluenIUH_Kelly)(double,double)");
        signatures.insert("NumericVector(*confluenIUH_Nash)(double,double)");
        signatures.insert("NumericVector(*confluenIUH_Clark)(double)");
        signatures.insert("NumericVector(*confluen_WaterGAP3)(NumericVector&,NumericVector,NumericVector,NumericVector,List,List)");
        signatures.insert("NumericVector(*confluen_WaterGAP3_L)(NumericVector&,NumericVector,NumericVector,NumericVector,List,List,IntegerVector,NumericVector&,NumericVector,NumericVector)");
        signatures.insert("double(*eva_NSE)(NumericVector,NumericVector)");
        signatures.insert("double(*eva_KGE)(NumericVector,NumericVector,double,double,double)");
        signatures.insert("NumericVector(*evatransPotential_TurcWendling)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransPotential_Linacre)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransPotential_FAO56)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransActual_SupplyRatio)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransActual_SupplyPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransActual_VIC)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransActual_GR4J)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransActual_UBC)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransActual_LiangLand)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransActual_LiangSoil)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransActual_WaterGAP3)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*infilt_GR4J)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*infilt_UBC)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*infilt_SupplyRatio)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*infilt_AcceptRatio)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*infilt_SupplyPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*infilt_AcceptPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*infilt_HBV)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*infilt_XAJ)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*infilt_VIC)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*inteflow_GR4Jfix)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*inteflow_MaxPow)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*inteflow_ThreshPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*inteflow_Arno)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*inteflow_BevenWood)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*inteflow_SupplyPow0)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*inteflow_SupplyPow)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*inteflow_SupplyRatio)(NumericVector,NumericVector)");
        signatures.insert("NumericVector(*intercep_Full)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*lake_AcceptPow)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*lateral_SupplyPow)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*lateral_SupplyRatio)(NumericVector,NumericVector)");
        signatures.insert("NumericVector(*lateral_GR4J)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*lateral_GR4Jfix)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*lateral_ThreshPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*lateral_Arno)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*percola_GR4J)(NumericVector,NumericVector)");
        signatures.insert("NumericVector(*percola_GR4Jfix)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*percola_MaxPow)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*percola_ThreshPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*percola_Arno)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*percola_BevenWood)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*percola_SupplyPow)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*percola_SupplyRatio)(NumericVector,NumericVector)");
        signatures.insert("NumericVector(*percola_WaterGAP3)(NumericVector,NumericVector,LogicalVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*river_LinearResorvoir)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*riverlak_LinearResorvoir)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*snowMelt_Kustas)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*snowMelt_Factor)(NumericVector,NumericVector,NumericVector,NumericVector)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _HydroGallery_RcppExport_registerCCallable() { 
    R_RegisterCCallable("HydroGallery", "_HydroGallery_subset_get", (DL_FUNC)_HydroGallery_subset_get_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_subset_get_logical", (DL_FUNC)_HydroGallery_subset_get_logical_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_subset_put", (DL_FUNC)_HydroGallery_subset_put_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_subset_add", (DL_FUNC)_HydroGallery_subset_add_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_atmosSnow_ThresholdT", (DL_FUNC)_HydroGallery_atmosSnow_ThresholdT_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_atmosSnow_UBC", (DL_FUNC)_HydroGallery_atmosSnow_UBC_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_GR4J", (DL_FUNC)_HydroGallery_baseflow_GR4J_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_GR4Jfix", (DL_FUNC)_HydroGallery_baseflow_GR4Jfix_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_SupplyRatio", (DL_FUNC)_HydroGallery_baseflow_SupplyRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_SupplyPow", (DL_FUNC)_HydroGallery_baseflow_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_MaxPow", (DL_FUNC)_HydroGallery_baseflow_MaxPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_ThreshPow", (DL_FUNC)_HydroGallery_baseflow_ThreshPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_Arno", (DL_FUNC)_HydroGallery_baseflow_Arno_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_cali_DDS", (DL_FUNC)_HydroGallery_cali_DDS_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_landLeafAreaIndex_WaterGAP3", (DL_FUNC)_HydroGallery_landLeafAreaIndex_WaterGAP3_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_capirise_HBV", (DL_FUNC)_HydroGallery_capirise_HBV_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_capirise_HBVfix", (DL_FUNC)_HydroGallery_capirise_HBVfix_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_capirise_AcceptRatio", (DL_FUNC)_HydroGallery_capirise_AcceptRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_capirise_AcceptPow", (DL_FUNC)_HydroGallery_capirise_AcceptPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluen_IUH", (DL_FUNC)_HydroGallery_confluen_IUH_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluen_IUH2S", (DL_FUNC)_HydroGallery_confluen_IUH2S_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluen_IUH3S", (DL_FUNC)_HydroGallery_confluen_IUH3S_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluenIUH_GR4J1", (DL_FUNC)_HydroGallery_confluenIUH_GR4J1_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluenIUH_GR4J2", (DL_FUNC)_HydroGallery_confluenIUH_GR4J2_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluenIUH_Kelly", (DL_FUNC)_HydroGallery_confluenIUH_Kelly_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluenIUH_Nash", (DL_FUNC)_HydroGallery_confluenIUH_Nash_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluenIUH_Clark", (DL_FUNC)_HydroGallery_confluenIUH_Clark_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluen_WaterGAP3", (DL_FUNC)_HydroGallery_confluen_WaterGAP3_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluen_WaterGAP3_L", (DL_FUNC)_HydroGallery_confluen_WaterGAP3_L_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_eva_NSE", (DL_FUNC)_HydroGallery_eva_NSE_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_eva_KGE", (DL_FUNC)_HydroGallery_eva_KGE_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransPotential_TurcWendling", (DL_FUNC)_HydroGallery_evatransPotential_TurcWendling_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransPotential_Linacre", (DL_FUNC)_HydroGallery_evatransPotential_Linacre_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransPotential_FAO56", (DL_FUNC)_HydroGallery_evatransPotential_FAO56_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_SupplyRatio", (DL_FUNC)_HydroGallery_evatransActual_SupplyRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_SupplyPow", (DL_FUNC)_HydroGallery_evatransActual_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_VIC", (DL_FUNC)_HydroGallery_evatransActual_VIC_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_GR4J", (DL_FUNC)_HydroGallery_evatransActual_GR4J_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_UBC", (DL_FUNC)_HydroGallery_evatransActual_UBC_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_LiangLand", (DL_FUNC)_HydroGallery_evatransActual_LiangLand_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_LiangSoil", (DL_FUNC)_HydroGallery_evatransActual_LiangSoil_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_WaterGAP3", (DL_FUNC)_HydroGallery_evatransActual_WaterGAP3_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_GR4J", (DL_FUNC)_HydroGallery_infilt_GR4J_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_UBC", (DL_FUNC)_HydroGallery_infilt_UBC_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_SupplyRatio", (DL_FUNC)_HydroGallery_infilt_SupplyRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_AcceptRatio", (DL_FUNC)_HydroGallery_infilt_AcceptRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_SupplyPow", (DL_FUNC)_HydroGallery_infilt_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_AcceptPow", (DL_FUNC)_HydroGallery_infilt_AcceptPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_HBV", (DL_FUNC)_HydroGallery_infilt_HBV_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_XAJ", (DL_FUNC)_HydroGallery_infilt_XAJ_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_VIC", (DL_FUNC)_HydroGallery_infilt_VIC_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_GR4Jfix", (DL_FUNC)_HydroGallery_inteflow_GR4Jfix_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_MaxPow", (DL_FUNC)_HydroGallery_inteflow_MaxPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_ThreshPow", (DL_FUNC)_HydroGallery_inteflow_ThreshPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_Arno", (DL_FUNC)_HydroGallery_inteflow_Arno_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_BevenWood", (DL_FUNC)_HydroGallery_inteflow_BevenWood_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_SupplyPow0", (DL_FUNC)_HydroGallery_inteflow_SupplyPow0_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_SupplyPow", (DL_FUNC)_HydroGallery_inteflow_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_SupplyRatio", (DL_FUNC)_HydroGallery_inteflow_SupplyRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_intercep_Full", (DL_FUNC)_HydroGallery_intercep_Full_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lake_AcceptPow", (DL_FUNC)_HydroGallery_lake_AcceptPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lateral_SupplyPow", (DL_FUNC)_HydroGallery_lateral_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lateral_SupplyRatio", (DL_FUNC)_HydroGallery_lateral_SupplyRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lateral_GR4J", (DL_FUNC)_HydroGallery_lateral_GR4J_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lateral_GR4Jfix", (DL_FUNC)_HydroGallery_lateral_GR4Jfix_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lateral_ThreshPow", (DL_FUNC)_HydroGallery_lateral_ThreshPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lateral_Arno", (DL_FUNC)_HydroGallery_lateral_Arno_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_GR4J", (DL_FUNC)_HydroGallery_percola_GR4J_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_GR4Jfix", (DL_FUNC)_HydroGallery_percola_GR4Jfix_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_MaxPow", (DL_FUNC)_HydroGallery_percola_MaxPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_ThreshPow", (DL_FUNC)_HydroGallery_percola_ThreshPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_Arno", (DL_FUNC)_HydroGallery_percola_Arno_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_BevenWood", (DL_FUNC)_HydroGallery_percola_BevenWood_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_SupplyPow", (DL_FUNC)_HydroGallery_percola_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_SupplyRatio", (DL_FUNC)_HydroGallery_percola_SupplyRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_WaterGAP3", (DL_FUNC)_HydroGallery_percola_WaterGAP3_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_river_LinearResorvoir", (DL_FUNC)_HydroGallery_river_LinearResorvoir_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_riverlak_LinearResorvoir", (DL_FUNC)_HydroGallery_riverlak_LinearResorvoir_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_snowMelt_Kustas", (DL_FUNC)_HydroGallery_snowMelt_Kustas_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_snowMelt_Factor", (DL_FUNC)_HydroGallery_snowMelt_Factor_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_RcppExport_validate", (DL_FUNC)_HydroGallery_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_HydroGallery_subset_get", (DL_FUNC) &_HydroGallery_subset_get, 2},
    {"_HydroGallery_subset_get_logical", (DL_FUNC) &_HydroGallery_subset_get_logical, 2},
    {"_HydroGallery_subset_put", (DL_FUNC) &_HydroGallery_subset_put, 3},
    {"_HydroGallery_subset_add", (DL_FUNC) &_HydroGallery_subset_add, 3},
    {"_HydroGallery_atmosSnow_ThresholdT", (DL_FUNC) &_HydroGallery_atmosSnow_ThresholdT, 3},
    {"_HydroGallery_atmosSnow_UBC", (DL_FUNC) &_HydroGallery_atmosSnow_UBC, 3},
    {"_HydroGallery_baseflow_GR4J", (DL_FUNC) &_HydroGallery_baseflow_GR4J, 2},
    {"_HydroGallery_baseflow_GR4Jfix", (DL_FUNC) &_HydroGallery_baseflow_GR4Jfix, 3},
    {"_HydroGallery_baseflow_SupplyRatio", (DL_FUNC) &_HydroGallery_baseflow_SupplyRatio, 2},
    {"_HydroGallery_baseflow_SupplyPow", (DL_FUNC) &_HydroGallery_baseflow_SupplyPow, 3},
    {"_HydroGallery_baseflow_MaxPow", (DL_FUNC) &_HydroGallery_baseflow_MaxPow, 4},
    {"_HydroGallery_baseflow_ThreshPow", (DL_FUNC) &_HydroGallery_baseflow_ThreshPow, 5},
    {"_HydroGallery_baseflow_Arno", (DL_FUNC) &_HydroGallery_baseflow_Arno, 5},
    {"_HydroGallery_cali_DDS", (DL_FUNC) &_HydroGallery_cali_DDS, 7},
    {"_HydroGallery_landLeafAreaIndex_WaterGAP3", (DL_FUNC) &_HydroGallery_landLeafAreaIndex_WaterGAP3, 7},
    {"_HydroGallery_capirise_HBV", (DL_FUNC) &_HydroGallery_capirise_HBV, 4},
    {"_HydroGallery_capirise_HBVfix", (DL_FUNC) &_HydroGallery_capirise_HBVfix, 5},
    {"_HydroGallery_capirise_AcceptRatio", (DL_FUNC) &_HydroGallery_capirise_AcceptRatio, 5},
    {"_HydroGallery_capirise_AcceptPow", (DL_FUNC) &_HydroGallery_capirise_AcceptPow, 6},
    {"_HydroGallery_confluen_IUH", (DL_FUNC) &_HydroGallery_confluen_IUH, 2},
    {"_HydroGallery_confluen_IUH2S", (DL_FUNC) &_HydroGallery_confluen_IUH2S, 4},
    {"_HydroGallery_confluen_IUH3S", (DL_FUNC) &_HydroGallery_confluen_IUH3S, 6},
    {"_HydroGallery_confluenIUH_GR4J1", (DL_FUNC) &_HydroGallery_confluenIUH_GR4J1, 1},
    {"_HydroGallery_confluenIUH_GR4J2", (DL_FUNC) &_HydroGallery_confluenIUH_GR4J2, 1},
    {"_HydroGallery_confluenIUH_Kelly", (DL_FUNC) &_HydroGallery_confluenIUH_Kelly, 2},
    {"_HydroGallery_confluenIUH_Nash", (DL_FUNC) &_HydroGallery_confluenIUH_Nash, 2},
    {"_HydroGallery_confluenIUH_Clark", (DL_FUNC) &_HydroGallery_confluenIUH_Clark, 1},
    {"_HydroGallery_confluen_WaterGAP3", (DL_FUNC) &_HydroGallery_confluen_WaterGAP3, 6},
    {"_HydroGallery_confluen_WaterGAP3_L", (DL_FUNC) &_HydroGallery_confluen_WaterGAP3_L, 10},
    {"_HydroGallery_eva_NSE", (DL_FUNC) &_HydroGallery_eva_NSE, 2},
    {"_HydroGallery_eva_KGE", (DL_FUNC) &_HydroGallery_eva_KGE, 5},
    {"_HydroGallery_evatransPotential_TurcWendling", (DL_FUNC) &_HydroGallery_evatransPotential_TurcWendling, 3},
    {"_HydroGallery_evatransPotential_Linacre", (DL_FUNC) &_HydroGallery_evatransPotential_Linacre, 5},
    {"_HydroGallery_evatransPotential_FAO56", (DL_FUNC) &_HydroGallery_evatransPotential_FAO56, 6},
    {"_HydroGallery_evatransActual_SupplyRatio", (DL_FUNC) &_HydroGallery_evatransActual_SupplyRatio, 4},
    {"_HydroGallery_evatransActual_SupplyPow", (DL_FUNC) &_HydroGallery_evatransActual_SupplyPow, 5},
    {"_HydroGallery_evatransActual_VIC", (DL_FUNC) &_HydroGallery_evatransActual_VIC, 4},
    {"_HydroGallery_evatransActual_GR4J", (DL_FUNC) &_HydroGallery_evatransActual_GR4J, 3},
    {"_HydroGallery_evatransActual_UBC", (DL_FUNC) &_HydroGallery_evatransActual_UBC, 4},
    {"_HydroGallery_evatransActual_LiangLand", (DL_FUNC) &_HydroGallery_evatransActual_LiangLand, 4},
    {"_HydroGallery_evatransActual_LiangSoil", (DL_FUNC) &_HydroGallery_evatransActual_LiangSoil, 4},
    {"_HydroGallery_evatransActual_WaterGAP3", (DL_FUNC) &_HydroGallery_evatransActual_WaterGAP3, 4},
    {"_HydroGallery_infilt_GR4J", (DL_FUNC) &_HydroGallery_infilt_GR4J, 3},
    {"_HydroGallery_infilt_UBC", (DL_FUNC) &_HydroGallery_infilt_UBC, 5},
    {"_HydroGallery_infilt_SupplyRatio", (DL_FUNC) &_HydroGallery_infilt_SupplyRatio, 4},
    {"_HydroGallery_infilt_AcceptRatio", (DL_FUNC) &_HydroGallery_infilt_AcceptRatio, 4},
    {"_HydroGallery_infilt_SupplyPow", (DL_FUNC) &_HydroGallery_infilt_SupplyPow, 5},
    {"_HydroGallery_infilt_AcceptPow", (DL_FUNC) &_HydroGallery_infilt_AcceptPow, 5},
    {"_HydroGallery_infilt_HBV", (DL_FUNC) &_HydroGallery_infilt_HBV, 4},
    {"_HydroGallery_infilt_XAJ", (DL_FUNC) &_HydroGallery_infilt_XAJ, 4},
    {"_HydroGallery_infilt_VIC", (DL_FUNC) &_HydroGallery_infilt_VIC, 4},
    {"_HydroGallery_inteflow_GR4Jfix", (DL_FUNC) &_HydroGallery_inteflow_GR4Jfix, 4},
    {"_HydroGallery_inteflow_MaxPow", (DL_FUNC) &_HydroGallery_inteflow_MaxPow, 4},
    {"_HydroGallery_inteflow_ThreshPow", (DL_FUNC) &_HydroGallery_inteflow_ThreshPow, 5},
    {"_HydroGallery_inteflow_Arno", (DL_FUNC) &_HydroGallery_inteflow_Arno, 5},
    {"_HydroGallery_inteflow_BevenWood", (DL_FUNC) &_HydroGallery_inteflow_BevenWood, 4},
    {"_HydroGallery_inteflow_SupplyPow0", (DL_FUNC) &_HydroGallery_inteflow_SupplyPow0, 3},
    {"_HydroGallery_inteflow_SupplyPow", (DL_FUNC) &_HydroGallery_inteflow_SupplyPow, 4},
    {"_HydroGallery_inteflow_SupplyRatio", (DL_FUNC) &_HydroGallery_inteflow_SupplyRatio, 2},
    {"_HydroGallery_intercep_Full", (DL_FUNC) &_HydroGallery_intercep_Full, 3},
    {"_HydroGallery_lake_AcceptPow", (DL_FUNC) &_HydroGallery_lake_AcceptPow, 4},
    {"_HydroGallery_lateral_SupplyPow", (DL_FUNC) &_HydroGallery_lateral_SupplyPow, 4},
    {"_HydroGallery_lateral_SupplyRatio", (DL_FUNC) &_HydroGallery_lateral_SupplyRatio, 2},
    {"_HydroGallery_lateral_GR4J", (DL_FUNC) &_HydroGallery_lateral_GR4J, 3},
    {"_HydroGallery_lateral_GR4Jfix", (DL_FUNC) &_HydroGallery_lateral_GR4Jfix, 4},
    {"_HydroGallery_lateral_ThreshPow", (DL_FUNC) &_HydroGallery_lateral_ThreshPow, 5},
    {"_HydroGallery_lateral_Arno", (DL_FUNC) &_HydroGallery_lateral_Arno, 5},
    {"_HydroGallery_percola_GR4J", (DL_FUNC) &_HydroGallery_percola_GR4J, 2},
    {"_HydroGallery_percola_GR4Jfix", (DL_FUNC) &_HydroGallery_percola_GR4Jfix, 3},
    {"_HydroGallery_percola_MaxPow", (DL_FUNC) &_HydroGallery_percola_MaxPow, 4},
    {"_HydroGallery_percola_ThreshPow", (DL_FUNC) &_HydroGallery_percola_ThreshPow, 5},
    {"_HydroGallery_percola_Arno", (DL_FUNC) &_HydroGallery_percola_Arno, 5},
    {"_HydroGallery_percola_BevenWood", (DL_FUNC) &_HydroGallery_percola_BevenWood, 4},
    {"_HydroGallery_percola_SupplyPow", (DL_FUNC) &_HydroGallery_percola_SupplyPow, 4},
    {"_HydroGallery_percola_SupplyRatio", (DL_FUNC) &_HydroGallery_percola_SupplyRatio, 2},
    {"_HydroGallery_percola_WaterGAP3", (DL_FUNC) &_HydroGallery_percola_WaterGAP3, 5},
    {"_HydroGallery_river_LinearResorvoir", (DL_FUNC) &_HydroGallery_river_LinearResorvoir, 4},
    {"_HydroGallery_riverlak_LinearResorvoir", (DL_FUNC) &_HydroGallery_riverlak_LinearResorvoir, 4},
    {"_HydroGallery_snowMelt_Kustas", (DL_FUNC) &_HydroGallery_snowMelt_Kustas, 5},
    {"_HydroGallery_snowMelt_Factor", (DL_FUNC) &_HydroGallery_snowMelt_Factor, 4},
    {"_HydroGallery_RcppExport_registerCCallable", (DL_FUNC) &_HydroGallery_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_HydroGallery(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
