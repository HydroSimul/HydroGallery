// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/HydroGallery.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// atmosSnow_ThresholdT
arma::vec atmosSnow_ThresholdT(const arma::vec& ATMOS_precipitation_mm, const arma::vec& ATMOS_temperature_Cel, const arma::vec& param_ATMOS_thr_Ts);
static SEXP _HydroGallery_atmosSnow_ThresholdT_try(SEXP ATMOS_precipitation_mmSEXP, SEXP ATMOS_temperature_CelSEXP, SEXP param_ATMOS_thr_TsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_precipitation_mm(ATMOS_precipitation_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_ATMOS_thr_Ts(param_ATMOS_thr_TsSEXP);
    rcpp_result_gen = Rcpp::wrap(atmosSnow_ThresholdT(ATMOS_precipitation_mm, ATMOS_temperature_Cel, param_ATMOS_thr_Ts));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_atmosSnow_ThresholdT(SEXP ATMOS_precipitation_mmSEXP, SEXP ATMOS_temperature_CelSEXP, SEXP param_ATMOS_thr_TsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_atmosSnow_ThresholdT_try(ATMOS_precipitation_mmSEXP, ATMOS_temperature_CelSEXP, param_ATMOS_thr_TsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// atmosSnow_UBC
arma::vec atmosSnow_UBC(const arma::vec& ATMOS_precipitation_mm, const arma::vec& ATMOS_temperature_Cel, const arma::vec& param_ATMOS_ubc_A0FORM);
static SEXP _HydroGallery_atmosSnow_UBC_try(SEXP ATMOS_precipitation_mmSEXP, SEXP ATMOS_temperature_CelSEXP, SEXP param_ATMOS_ubc_A0FORMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_precipitation_mm(ATMOS_precipitation_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_ATMOS_ubc_A0FORM(param_ATMOS_ubc_A0FORMSEXP);
    rcpp_result_gen = Rcpp::wrap(atmosSnow_UBC(ATMOS_precipitation_mm, ATMOS_temperature_Cel, param_ATMOS_ubc_A0FORM));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_atmosSnow_UBC(SEXP ATMOS_precipitation_mmSEXP, SEXP ATMOS_temperature_CelSEXP, SEXP param_ATMOS_ubc_A0FORMSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_atmosSnow_UBC_try(ATMOS_precipitation_mmSEXP, ATMOS_temperature_CelSEXP, param_ATMOS_ubc_A0FORMSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_GR4J
arma::vec baseflow_GR4J(const arma::vec& GROUND_water_mm, const arma::vec& GROUND_capacity_mm);
static SEXP _HydroGallery_baseflow_GR4J_try(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_capacity_mm(GROUND_capacity_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_GR4J(GROUND_water_mm, GROUND_capacity_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_GR4J(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_GR4J_try(GROUND_water_mmSEXP, GROUND_capacity_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_GR4Jfix
arma::vec baseflow_GR4Jfix(const arma::vec& GROUND_water_mm, const arma::vec& GROUND_capacity_mm, const arma::vec& param_BASEFLOW_grf_gamma);
static SEXP _HydroGallery_baseflow_GR4Jfix_try(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP param_BASEFLOW_grf_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_capacity_mm(GROUND_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_BASEFLOW_grf_gamma(param_BASEFLOW_grf_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_GR4Jfix(GROUND_water_mm, GROUND_capacity_mm, param_BASEFLOW_grf_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_GR4Jfix(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP param_BASEFLOW_grf_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_GR4Jfix_try(GROUND_water_mmSEXP, GROUND_capacity_mmSEXP, param_BASEFLOW_grf_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_SupplyRatio
arma::vec baseflow_SupplyRatio(const arma::vec& GROUND_water_mm, const arma::vec& param_BASEFLOW_sur_k);
static SEXP _HydroGallery_baseflow_SupplyRatio_try(SEXP GROUND_water_mmSEXP, SEXP param_BASEFLOW_sur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_BASEFLOW_sur_k(param_BASEFLOW_sur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_SupplyRatio(GROUND_water_mm, param_BASEFLOW_sur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_SupplyRatio(SEXP GROUND_water_mmSEXP, SEXP param_BASEFLOW_sur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_SupplyRatio_try(GROUND_water_mmSEXP, param_BASEFLOW_sur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_SupplyPow
arma::vec baseflow_SupplyPow(const arma::vec& GROUND_water_mm, const arma::vec& param_BASEFLOW_sup_k, const arma::vec& param_BASEFLOW_sup_gamma);
static SEXP _HydroGallery_baseflow_SupplyPow_try(SEXP GROUND_water_mmSEXP, SEXP param_BASEFLOW_sup_kSEXP, SEXP param_BASEFLOW_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_BASEFLOW_sup_k(param_BASEFLOW_sup_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_BASEFLOW_sup_gamma(param_BASEFLOW_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_SupplyPow(GROUND_water_mm, param_BASEFLOW_sup_k, param_BASEFLOW_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_SupplyPow(SEXP GROUND_water_mmSEXP, SEXP param_BASEFLOW_sup_kSEXP, SEXP param_BASEFLOW_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_SupplyPow_try(GROUND_water_mmSEXP, param_BASEFLOW_sup_kSEXP, param_BASEFLOW_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_MaxPow
arma::vec baseflow_MaxPow(const arma::vec& GROUND_water_mm, const arma::vec& GROUND_capacity_mm, const arma::vec& GROUND_potentialBaseflow_mm, const arma::vec& param_BASEFLOW_map_gamma);
static SEXP _HydroGallery_baseflow_MaxPow_try(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialBaseflow_mmSEXP, SEXP param_BASEFLOW_map_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_capacity_mm(GROUND_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_potentialBaseflow_mm(GROUND_potentialBaseflow_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_BASEFLOW_map_gamma(param_BASEFLOW_map_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_MaxPow(GROUND_water_mm, GROUND_capacity_mm, GROUND_potentialBaseflow_mm, param_BASEFLOW_map_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_MaxPow(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialBaseflow_mmSEXP, SEXP param_BASEFLOW_map_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_MaxPow_try(GROUND_water_mmSEXP, GROUND_capacity_mmSEXP, GROUND_potentialBaseflow_mmSEXP, param_BASEFLOW_map_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_ThreshPow
arma::vec baseflow_ThreshPow(const arma::vec& GROUND_water_mm, const arma::vec& GROUND_capacity_mm, const arma::vec& GROUND_potentialBaseflow_mm, const arma::vec& param_BASEFLOW_thp_thresh, const arma::vec& param_BASEFLOW_thp_gamma);
static SEXP _HydroGallery_baseflow_ThreshPow_try(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialBaseflow_mmSEXP, SEXP param_BASEFLOW_thp_threshSEXP, SEXP param_BASEFLOW_thp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_capacity_mm(GROUND_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_potentialBaseflow_mm(GROUND_potentialBaseflow_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_BASEFLOW_thp_thresh(param_BASEFLOW_thp_threshSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_BASEFLOW_thp_gamma(param_BASEFLOW_thp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_ThreshPow(GROUND_water_mm, GROUND_capacity_mm, GROUND_potentialBaseflow_mm, param_BASEFLOW_thp_thresh, param_BASEFLOW_thp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_ThreshPow(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialBaseflow_mmSEXP, SEXP param_BASEFLOW_thp_threshSEXP, SEXP param_BASEFLOW_thp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_ThreshPow_try(GROUND_water_mmSEXP, GROUND_capacity_mmSEXP, GROUND_potentialBaseflow_mmSEXP, param_BASEFLOW_thp_threshSEXP, param_BASEFLOW_thp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_Arno
arma::vec baseflow_Arno(const arma::vec& GROUND_water_mm, const arma::vec& GROUND_capacity_mm, const arma::vec& GROUND_potentialBaseflow_mm, const arma::vec& param_BASEFLOW_arn_thresh, const arma::vec& param_BASEFLOW_arn_k);
static SEXP _HydroGallery_baseflow_Arno_try(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialBaseflow_mmSEXP, SEXP param_BASEFLOW_arn_threshSEXP, SEXP param_BASEFLOW_arn_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_capacity_mm(GROUND_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_potentialBaseflow_mm(GROUND_potentialBaseflow_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_BASEFLOW_arn_thresh(param_BASEFLOW_arn_threshSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_BASEFLOW_arn_k(param_BASEFLOW_arn_kSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_Arno(GROUND_water_mm, GROUND_capacity_mm, GROUND_potentialBaseflow_mm, param_BASEFLOW_arn_thresh, param_BASEFLOW_arn_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_baseflow_Arno(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialBaseflow_mmSEXP, SEXP param_BASEFLOW_arn_threshSEXP, SEXP param_BASEFLOW_arn_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_baseflow_Arno_try(GROUND_water_mmSEXP, GROUND_capacity_mmSEXP, GROUND_potentialBaseflow_mmSEXP, param_BASEFLOW_arn_threshSEXP, param_BASEFLOW_arn_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// landLeafAreaIndex_WaterGAP3
arma::mat landLeafAreaIndex_WaterGAP3(const arma::mat& ATMOS_temperature_Cel, const arma::mat& ATMOS_precipitation_mm, const arma::vec& CELL_latitude_deg, const arma::ivec& LAND_growUpDay_d, const arma::vec& LAND_leafAreaIndexMin_, const arma::vec& LAND_leafAreaIndexMax_, const arma::ivec& Time_dayOfYear_d);
static SEXP _HydroGallery_landLeafAreaIndex_WaterGAP3_try(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_precipitation_mmSEXP, SEXP CELL_latitude_degSEXP, SEXP LAND_growUpDay_dSEXP, SEXP LAND_leafAreaIndexMin_SEXP, SEXP LAND_leafAreaIndexMax_SEXP, SEXP Time_dayOfYear_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ATMOS_precipitation_mm(ATMOS_precipitation_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CELL_latitude_deg(CELL_latitude_degSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type LAND_growUpDay_d(LAND_growUpDay_dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_leafAreaIndexMin_(LAND_leafAreaIndexMin_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_leafAreaIndexMax_(LAND_leafAreaIndexMax_SEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type Time_dayOfYear_d(Time_dayOfYear_dSEXP);
    rcpp_result_gen = Rcpp::wrap(landLeafAreaIndex_WaterGAP3(ATMOS_temperature_Cel, ATMOS_precipitation_mm, CELL_latitude_deg, LAND_growUpDay_d, LAND_leafAreaIndexMin_, LAND_leafAreaIndexMax_, Time_dayOfYear_d));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_landLeafAreaIndex_WaterGAP3(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_precipitation_mmSEXP, SEXP CELL_latitude_degSEXP, SEXP LAND_growUpDay_dSEXP, SEXP LAND_leafAreaIndexMin_SEXP, SEXP LAND_leafAreaIndexMax_SEXP, SEXP Time_dayOfYear_dSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_landLeafAreaIndex_WaterGAP3_try(ATMOS_temperature_CelSEXP, ATMOS_precipitation_mmSEXP, CELL_latitude_degSEXP, LAND_growUpDay_dSEXP, LAND_leafAreaIndexMin_SEXP, LAND_leafAreaIndexMax_SEXP, Time_dayOfYear_dSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// capirise_HBV
arma::vec capirise_HBV(const arma::vec& GROUND_water_mm, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& SOIL_potentialCapirise_mm);
static SEXP _HydroGallery_capirise_HBV_try(SEXP GROUND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialCapirise_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_potentialCapirise_mm(SOIL_potentialCapirise_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(capirise_HBV(GROUND_water_mm, SOIL_water_mm, SOIL_capacity_mm, SOIL_potentialCapirise_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_capirise_HBV(SEXP GROUND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialCapirise_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_capirise_HBV_try(GROUND_water_mmSEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, SOIL_potentialCapirise_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// capirise_HBVfix
arma::vec capirise_HBVfix(const arma::vec& GROUND_water_mm, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& SOIL_fieldCapacityPerc_1, const arma::vec& SOIL_potentialCapirise_mm);
static SEXP _HydroGallery_capirise_HBVfix_try(SEXP GROUND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_fieldCapacityPerc_1SEXP, SEXP SOIL_potentialCapirise_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_fieldCapacityPerc_1(SOIL_fieldCapacityPerc_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_potentialCapirise_mm(SOIL_potentialCapirise_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(capirise_HBVfix(GROUND_water_mm, SOIL_water_mm, SOIL_capacity_mm, SOIL_fieldCapacityPerc_1, SOIL_potentialCapirise_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_capirise_HBVfix(SEXP GROUND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_fieldCapacityPerc_1SEXP, SEXP SOIL_potentialCapirise_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_capirise_HBVfix_try(GROUND_water_mmSEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, SOIL_fieldCapacityPerc_1SEXP, SOIL_potentialCapirise_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// capirise_AcceptRatio
arma::vec capirise_AcceptRatio(const arma::vec& GROUND_water_mm, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& SOIL_fieldCapacityPerc_1, const arma::vec& param_CAPIRISE_acr_k);
static SEXP _HydroGallery_capirise_AcceptRatio_try(SEXP GROUND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_fieldCapacityPerc_1SEXP, SEXP param_CAPIRISE_acr_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_fieldCapacityPerc_1(SOIL_fieldCapacityPerc_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_CAPIRISE_acr_k(param_CAPIRISE_acr_kSEXP);
    rcpp_result_gen = Rcpp::wrap(capirise_AcceptRatio(GROUND_water_mm, SOIL_water_mm, SOIL_capacity_mm, SOIL_fieldCapacityPerc_1, param_CAPIRISE_acr_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_capirise_AcceptRatio(SEXP GROUND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_fieldCapacityPerc_1SEXP, SEXP param_CAPIRISE_acr_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_capirise_AcceptRatio_try(GROUND_water_mmSEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, SOIL_fieldCapacityPerc_1SEXP, param_CAPIRISE_acr_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// capirise_AcceptPow
arma::vec capirise_AcceptPow(const arma::vec& GROUND_water_mm, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& SOIL_fieldCapacityPerc_1, const arma::vec& param_CAPIRISE_acp_k, const arma::vec& param_CAPIRISE_acp_gamma);
static SEXP _HydroGallery_capirise_AcceptPow_try(SEXP GROUND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_fieldCapacityPerc_1SEXP, SEXP param_CAPIRISE_acp_kSEXP, SEXP param_CAPIRISE_acp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_fieldCapacityPerc_1(SOIL_fieldCapacityPerc_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_CAPIRISE_acp_k(param_CAPIRISE_acp_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_CAPIRISE_acp_gamma(param_CAPIRISE_acp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(capirise_AcceptPow(GROUND_water_mm, SOIL_water_mm, SOIL_capacity_mm, SOIL_fieldCapacityPerc_1, param_CAPIRISE_acp_k, param_CAPIRISE_acp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_capirise_AcceptPow(SEXP GROUND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_fieldCapacityPerc_1SEXP, SEXP param_CAPIRISE_acp_kSEXP, SEXP param_CAPIRISE_acp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_capirise_AcceptPow_try(GROUND_water_mmSEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, SOIL_fieldCapacityPerc_1SEXP, param_CAPIRISE_acp_kSEXP, param_CAPIRISE_acp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_IUH
arma::vec confluen_IUH(const arma::vec& CONFLUEN_inputWater_mm, const arma::vec& CONFLUEN_iuh_1);
static SEXP _HydroGallery_confluen_IUH_try(SEXP CONFLUEN_inputWater_mmSEXP, SEXP CONFLUEN_iuh_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type CONFLUEN_inputWater_mm(CONFLUEN_inputWater_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CONFLUEN_iuh_1(CONFLUEN_iuh_1SEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_IUH(CONFLUEN_inputWater_mm, CONFLUEN_iuh_1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluen_IUH(SEXP CONFLUEN_inputWater_mmSEXP, SEXP CONFLUEN_iuh_1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluen_IUH_try(CONFLUEN_inputWater_mmSEXP, CONFLUEN_iuh_1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_IUH2S
arma::vec confluen_IUH2S(const arma::vec& LAND_runoff_mm, const arma::vec& GROUND_baseflow_mm, const arma::vec& CONFLUEN_iuhLand_1, const arma::vec& CONFLUEN_iuhGround_1);
static SEXP _HydroGallery_confluen_IUH2S_try(SEXP LAND_runoff_mmSEXP, SEXP GROUND_baseflow_mmSEXP, SEXP CONFLUEN_iuhLand_1SEXP, SEXP CONFLUEN_iuhGround_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_runoff_mm(LAND_runoff_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_baseflow_mm(GROUND_baseflow_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CONFLUEN_iuhLand_1(CONFLUEN_iuhLand_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CONFLUEN_iuhGround_1(CONFLUEN_iuhGround_1SEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_IUH2S(LAND_runoff_mm, GROUND_baseflow_mm, CONFLUEN_iuhLand_1, CONFLUEN_iuhGround_1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluen_IUH2S(SEXP LAND_runoff_mmSEXP, SEXP GROUND_baseflow_mmSEXP, SEXP CONFLUEN_iuhLand_1SEXP, SEXP CONFLUEN_iuhGround_1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluen_IUH2S_try(LAND_runoff_mmSEXP, GROUND_baseflow_mmSEXP, CONFLUEN_iuhLand_1SEXP, CONFLUEN_iuhGround_1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_IUH3S
arma::vec confluen_IUH3S(const arma::vec& LAND_runoff_mm, const arma::vec& SOIL_interflow_mm, const arma::vec& GROUND_baseflow_mm, const arma::vec& CONFLUEN_iuhLand_1, const arma::vec& CONFLUEN_iuhSoil_1, const arma::vec& CONFLUEN_iuhGround_1);
static SEXP _HydroGallery_confluen_IUH3S_try(SEXP LAND_runoff_mmSEXP, SEXP SOIL_interflow_mmSEXP, SEXP GROUND_baseflow_mmSEXP, SEXP CONFLUEN_iuhLand_1SEXP, SEXP CONFLUEN_iuhSoil_1SEXP, SEXP CONFLUEN_iuhGround_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_runoff_mm(LAND_runoff_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_interflow_mm(SOIL_interflow_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_baseflow_mm(GROUND_baseflow_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CONFLUEN_iuhLand_1(CONFLUEN_iuhLand_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CONFLUEN_iuhSoil_1(CONFLUEN_iuhSoil_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CONFLUEN_iuhGround_1(CONFLUEN_iuhGround_1SEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_IUH3S(LAND_runoff_mm, SOIL_interflow_mm, GROUND_baseflow_mm, CONFLUEN_iuhLand_1, CONFLUEN_iuhSoil_1, CONFLUEN_iuhGround_1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluen_IUH3S(SEXP LAND_runoff_mmSEXP, SEXP SOIL_interflow_mmSEXP, SEXP GROUND_baseflow_mmSEXP, SEXP CONFLUEN_iuhLand_1SEXP, SEXP CONFLUEN_iuhSoil_1SEXP, SEXP CONFLUEN_iuhGround_1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluen_IUH3S_try(LAND_runoff_mmSEXP, SOIL_interflow_mmSEXP, GROUND_baseflow_mmSEXP, CONFLUEN_iuhLand_1SEXP, CONFLUEN_iuhSoil_1SEXP, CONFLUEN_iuhGround_1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluenIUH_GR4J1
arma::vec confluenIUH_GR4J1(double CONFLUEN_responseTime_TS);
static SEXP _HydroGallery_confluenIUH_GR4J1_try(SEXP CONFLUEN_responseTime_TSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type CONFLUEN_responseTime_TS(CONFLUEN_responseTime_TSSEXP);
    rcpp_result_gen = Rcpp::wrap(confluenIUH_GR4J1(CONFLUEN_responseTime_TS));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluenIUH_GR4J1(SEXP CONFLUEN_responseTime_TSSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluenIUH_GR4J1_try(CONFLUEN_responseTime_TSSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluenIUH_GR4J2
arma::vec confluenIUH_GR4J2(double CONFLUEN_responseTime_TS);
static SEXP _HydroGallery_confluenIUH_GR4J2_try(SEXP CONFLUEN_responseTime_TSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type CONFLUEN_responseTime_TS(CONFLUEN_responseTime_TSSEXP);
    rcpp_result_gen = Rcpp::wrap(confluenIUH_GR4J2(CONFLUEN_responseTime_TS));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluenIUH_GR4J2(SEXP CONFLUEN_responseTime_TSSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluenIUH_GR4J2_try(CONFLUEN_responseTime_TSSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluenIUH_Kelly
arma::vec confluenIUH_Kelly(double CONFLUEN_responseTime_TS, double param_CONFLUEN_kel_k);
static SEXP _HydroGallery_confluenIUH_Kelly_try(SEXP CONFLUEN_responseTime_TSSEXP, SEXP param_CONFLUEN_kel_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type CONFLUEN_responseTime_TS(CONFLUEN_responseTime_TSSEXP);
    Rcpp::traits::input_parameter< double >::type param_CONFLUEN_kel_k(param_CONFLUEN_kel_kSEXP);
    rcpp_result_gen = Rcpp::wrap(confluenIUH_Kelly(CONFLUEN_responseTime_TS, param_CONFLUEN_kel_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluenIUH_Kelly(SEXP CONFLUEN_responseTime_TSSEXP, SEXP param_CONFLUEN_kel_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluenIUH_Kelly_try(CONFLUEN_responseTime_TSSEXP, param_CONFLUEN_kel_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluenIUH_Nash
arma::vec confluenIUH_Nash(double CONFLUEN_responseTime_TS, double param_CONFLUEN_nas_n);
static SEXP _HydroGallery_confluenIUH_Nash_try(SEXP CONFLUEN_responseTime_TSSEXP, SEXP param_CONFLUEN_nas_nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type CONFLUEN_responseTime_TS(CONFLUEN_responseTime_TSSEXP);
    Rcpp::traits::input_parameter< double >::type param_CONFLUEN_nas_n(param_CONFLUEN_nas_nSEXP);
    rcpp_result_gen = Rcpp::wrap(confluenIUH_Nash(CONFLUEN_responseTime_TS, param_CONFLUEN_nas_n));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluenIUH_Nash(SEXP CONFLUEN_responseTime_TSSEXP, SEXP param_CONFLUEN_nas_nSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluenIUH_Nash_try(CONFLUEN_responseTime_TSSEXP, param_CONFLUEN_nas_nSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluenIUH_Clark
arma::vec confluenIUH_Clark(double CONFLUEN_responseTime_TS);
static SEXP _HydroGallery_confluenIUH_Clark_try(SEXP CONFLUEN_responseTime_TSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type CONFLUEN_responseTime_TS(CONFLUEN_responseTime_TSSEXP);
    rcpp_result_gen = Rcpp::wrap(confluenIUH_Clark(CONFLUEN_responseTime_TS));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluenIUH_Clark(SEXP CONFLUEN_responseTime_TSSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluenIUH_Clark_try(CONFLUEN_responseTime_TSSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_WaterGAP3_H
arma::vec confluen_WaterGAP3_H(arma::vec& RIVER_water_m3, const arma::vec& RIVER_length_km, const arma::vec& RIVER_velocity_km, const arma::vec& RIVER_inflow_m3, const arma::field<arma::uvec>& CELL_cellNumberStep_int, const arma::field<arma::imat>& CELL_inflowCellNumberStep_int);
static SEXP _HydroGallery_confluen_WaterGAP3_H_try(SEXP RIVER_water_m3SEXP, SEXP RIVER_length_kmSEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_inflow_m3SEXP, SEXP CELL_cellNumberStep_intSEXP, SEXP CELL_inflowCellNumberStep_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type RIVER_water_m3(RIVER_water_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_length_km(RIVER_length_kmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_velocity_km(RIVER_velocity_kmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_inflow_m3(RIVER_inflow_m3SEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type CELL_cellNumberStep_int(CELL_cellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::imat>& >::type CELL_inflowCellNumberStep_int(CELL_inflowCellNumberStep_intSEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_WaterGAP3_H(RIVER_water_m3, RIVER_length_km, RIVER_velocity_km, RIVER_inflow_m3, CELL_cellNumberStep_int, CELL_inflowCellNumberStep_int));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluen_WaterGAP3_H(SEXP RIVER_water_m3SEXP, SEXP RIVER_length_kmSEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_inflow_m3SEXP, SEXP CELL_cellNumberStep_intSEXP, SEXP CELL_inflowCellNumberStep_intSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluen_WaterGAP3_H_try(RIVER_water_m3SEXP, RIVER_length_kmSEXP, RIVER_velocity_kmSEXP, RIVER_inflow_m3SEXP, CELL_cellNumberStep_intSEXP, CELL_inflowCellNumberStep_intSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_WaterGAP3_N
arma::vec confluen_WaterGAP3_N(arma::vec& RIVER_water_m3, const arma::vec& RIVER_length_km, const arma::vec& RIVER_velocity_km, const arma::vec& RIVER_inflow_m3, const arma::field<arma::uvec>& CELL_cellNumberStep_int, const arma::field<arma::imat>& CELL_inflowCellNumberStep_int, const arma::uvec& Riverlak_cellNumber_int, const arma::vec& Riverlak_capacity_m3, const arma::vec& param_Riverlak_lin_storeFactor);
static SEXP _HydroGallery_confluen_WaterGAP3_N_try(SEXP RIVER_water_m3SEXP, SEXP RIVER_length_kmSEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_inflow_m3SEXP, SEXP CELL_cellNumberStep_intSEXP, SEXP CELL_inflowCellNumberStep_intSEXP, SEXP Riverlak_cellNumber_intSEXP, SEXP Riverlak_capacity_m3SEXP, SEXP param_Riverlak_lin_storeFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type RIVER_water_m3(RIVER_water_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_length_km(RIVER_length_kmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_velocity_km(RIVER_velocity_kmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_inflow_m3(RIVER_inflow_m3SEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type CELL_cellNumberStep_int(CELL_cellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::imat>& >::type CELL_inflowCellNumberStep_int(CELL_inflowCellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Riverlak_cellNumber_int(Riverlak_cellNumber_intSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Riverlak_capacity_m3(Riverlak_capacity_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_Riverlak_lin_storeFactor(param_Riverlak_lin_storeFactorSEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_WaterGAP3_N(RIVER_water_m3, RIVER_length_km, RIVER_velocity_km, RIVER_inflow_m3, CELL_cellNumberStep_int, CELL_inflowCellNumberStep_int, Riverlak_cellNumber_int, Riverlak_capacity_m3, param_Riverlak_lin_storeFactor));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluen_WaterGAP3_N(SEXP RIVER_water_m3SEXP, SEXP RIVER_length_kmSEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_inflow_m3SEXP, SEXP CELL_cellNumberStep_intSEXP, SEXP CELL_inflowCellNumberStep_intSEXP, SEXP Riverlak_cellNumber_intSEXP, SEXP Riverlak_capacity_m3SEXP, SEXP param_Riverlak_lin_storeFactorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluen_WaterGAP3_N_try(RIVER_water_m3SEXP, RIVER_length_kmSEXP, RIVER_velocity_kmSEXP, RIVER_inflow_m3SEXP, CELL_cellNumberStep_intSEXP, CELL_inflowCellNumberStep_intSEXP, Riverlak_cellNumber_intSEXP, Riverlak_capacity_m3SEXP, param_Riverlak_lin_storeFactorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_WaterGAP3_U
arma::vec confluen_WaterGAP3_U(arma::vec& RIVER_water_m3, const arma::vec& RIVER_length_km, const arma::vec& RIVER_velocity_km, const arma::vec& RIVER_inflow_m3, const arma::field<arma::uvec>& CELL_cellNumberStep_int, const arma::field<arma::imat>& CELL_inflowCellNumberStep_int, const arma::uvec& Riverlak_cellNumber_int, const arma::vec& Riverlak_capacity_m3, const arma::uvec& Reservoi_cellNumber_int, const arma::vec& Reservoi_demand_m3, const arma::vec& Reservoi_capacity_m3, const arma::vec& Reservoi_meanInflow_m3, const arma::vec& Reservoi_meanDemand_m3, const arma::vec& Reservoi_releaseCoefficient_1, const arma::uvec& Reservoi_isIrrigate_01, const arma::vec& param_Riverlak_lin_storeFactor);
static SEXP _HydroGallery_confluen_WaterGAP3_U_try(SEXP RIVER_water_m3SEXP, SEXP RIVER_length_kmSEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_inflow_m3SEXP, SEXP CELL_cellNumberStep_intSEXP, SEXP CELL_inflowCellNumberStep_intSEXP, SEXP Riverlak_cellNumber_intSEXP, SEXP Riverlak_capacity_m3SEXP, SEXP Reservoi_cellNumber_intSEXP, SEXP Reservoi_demand_m3SEXP, SEXP Reservoi_capacity_m3SEXP, SEXP Reservoi_meanInflow_m3SEXP, SEXP Reservoi_meanDemand_m3SEXP, SEXP Reservoi_releaseCoefficient_1SEXP, SEXP Reservoi_isIrrigate_01SEXP, SEXP param_Riverlak_lin_storeFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type RIVER_water_m3(RIVER_water_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_length_km(RIVER_length_kmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_velocity_km(RIVER_velocity_kmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_inflow_m3(RIVER_inflow_m3SEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type CELL_cellNumberStep_int(CELL_cellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::imat>& >::type CELL_inflowCellNumberStep_int(CELL_inflowCellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Riverlak_cellNumber_int(Riverlak_cellNumber_intSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Riverlak_capacity_m3(Riverlak_capacity_m3SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Reservoi_cellNumber_int(Reservoi_cellNumber_intSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_demand_m3(Reservoi_demand_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_capacity_m3(Reservoi_capacity_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_meanInflow_m3(Reservoi_meanInflow_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_meanDemand_m3(Reservoi_meanDemand_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_releaseCoefficient_1(Reservoi_releaseCoefficient_1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Reservoi_isIrrigate_01(Reservoi_isIrrigate_01SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_Riverlak_lin_storeFactor(param_Riverlak_lin_storeFactorSEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_WaterGAP3_U(RIVER_water_m3, RIVER_length_km, RIVER_velocity_km, RIVER_inflow_m3, CELL_cellNumberStep_int, CELL_inflowCellNumberStep_int, Riverlak_cellNumber_int, Riverlak_capacity_m3, Reservoi_cellNumber_int, Reservoi_demand_m3, Reservoi_capacity_m3, Reservoi_meanInflow_m3, Reservoi_meanDemand_m3, Reservoi_releaseCoefficient_1, Reservoi_isIrrigate_01, param_Riverlak_lin_storeFactor));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_confluen_WaterGAP3_U(SEXP RIVER_water_m3SEXP, SEXP RIVER_length_kmSEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_inflow_m3SEXP, SEXP CELL_cellNumberStep_intSEXP, SEXP CELL_inflowCellNumberStep_intSEXP, SEXP Riverlak_cellNumber_intSEXP, SEXP Riverlak_capacity_m3SEXP, SEXP Reservoi_cellNumber_intSEXP, SEXP Reservoi_demand_m3SEXP, SEXP Reservoi_capacity_m3SEXP, SEXP Reservoi_meanInflow_m3SEXP, SEXP Reservoi_meanDemand_m3SEXP, SEXP Reservoi_releaseCoefficient_1SEXP, SEXP Reservoi_isIrrigate_01SEXP, SEXP param_Riverlak_lin_storeFactorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_confluen_WaterGAP3_U_try(RIVER_water_m3SEXP, RIVER_length_kmSEXP, RIVER_velocity_kmSEXP, RIVER_inflow_m3SEXP, CELL_cellNumberStep_intSEXP, CELL_inflowCellNumberStep_intSEXP, Riverlak_cellNumber_intSEXP, Riverlak_capacity_m3SEXP, Reservoi_cellNumber_intSEXP, Reservoi_demand_m3SEXP, Reservoi_capacity_m3SEXP, Reservoi_meanInflow_m3SEXP, Reservoi_meanDemand_m3SEXP, Reservoi_releaseCoefficient_1SEXP, Reservoi_isIrrigate_01SEXP, param_Riverlak_lin_storeFactorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// save_matbin
void save_matbin(SEXP matrix, const std::string& filename);
static SEXP _HydroGallery_save_matbin_try(SEXP matrixSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    save_matbin(matrix, filename);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_save_matbin(SEXP matrixSEXP, SEXP filenameSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_save_matbin_try(matrixSEXP, filenameSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// load_matbin
SEXP load_matbin(const std::string& filename);
static SEXP _HydroGallery_load_matbin_try(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(load_matbin(filename));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_load_matbin(SEXP filenameSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_load_matbin_try(filenameSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bind_matbin
void bind_matbin(const StringVector& input_files, const std::string& output_file);
static SEXP _HydroGallery_bind_matbin_try(SEXP input_filesSEXP, SEXP output_fileSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const StringVector& >::type input_files(input_filesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_file(output_fileSEXP);
    bind_matbin(input_files, output_file);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_bind_matbin(SEXP input_filesSEXP, SEXP output_fileSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_bind_matbin_try(input_filesSEXP, output_fileSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// save_vecbin
void save_vecbin(SEXP vector, const std::string& filename);
static SEXP _HydroGallery_save_vecbin_try(SEXP vectorSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type vector(vectorSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    save_vecbin(vector, filename);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_save_vecbin(SEXP vectorSEXP, SEXP filenameSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_save_vecbin_try(vectorSEXP, filenameSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// load_vecbin
SEXP load_vecbin(const std::string& filename);
static SEXP _HydroGallery_load_vecbin_try(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(load_vecbin(filename));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_load_vecbin(SEXP filenameSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_load_vecbin_try(filenameSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_SupplyRatio
arma::vec evatransActual_SupplyRatio(const arma::vec& ATMOS_potentialEvatrans_mm, const arma::vec& water_mm, const arma::vec& capacity_mm, const arma::vec& param_EVATRANS_sur_k);
static SEXP _HydroGallery_evatransActual_SupplyRatio_try(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_sur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_potentialEvatrans_mm(ATMOS_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_EVATRANS_sur_k(param_EVATRANS_sur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_SupplyRatio(ATMOS_potentialEvatrans_mm, water_mm, capacity_mm, param_EVATRANS_sur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_SupplyRatio(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_sur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_SupplyRatio_try(ATMOS_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_EVATRANS_sur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_SupplyPow
arma::vec evatransActual_SupplyPow(const arma::vec& ATMOS_potentialEvatrans_mm, const arma::vec& water_mm, const arma::vec& capacity_mm, const arma::vec& param_EVATRANS_sup_k, const arma::vec& param_EVATRANS_sup_gamma);
static SEXP _HydroGallery_evatransActual_SupplyPow_try(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_sup_kSEXP, SEXP param_EVATRANS_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_potentialEvatrans_mm(ATMOS_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_EVATRANS_sup_k(param_EVATRANS_sup_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_EVATRANS_sup_gamma(param_EVATRANS_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_SupplyPow(ATMOS_potentialEvatrans_mm, water_mm, capacity_mm, param_EVATRANS_sup_k, param_EVATRANS_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_SupplyPow(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_sup_kSEXP, SEXP param_EVATRANS_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_SupplyPow_try(ATMOS_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_EVATRANS_sup_kSEXP, param_EVATRANS_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_VIC
arma::vec evatransActual_VIC(const arma::vec& ATMOS_potentialEvatrans_mm, const arma::vec& water_mm, const arma::vec& capacity_mm, const arma::vec& param_EVATRANS_vic_gamma);
static SEXP _HydroGallery_evatransActual_VIC_try(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_vic_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_potentialEvatrans_mm(ATMOS_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_EVATRANS_vic_gamma(param_EVATRANS_vic_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_VIC(ATMOS_potentialEvatrans_mm, water_mm, capacity_mm, param_EVATRANS_vic_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_VIC(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_vic_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_VIC_try(ATMOS_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_EVATRANS_vic_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_GR4J
arma::vec evatransActual_GR4J(const arma::vec& ATMOS_potentialEvatrans_mm, const arma::vec& water_mm, const arma::vec& capacity_mm);
static SEXP _HydroGallery_evatransActual_GR4J_try(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_potentialEvatrans_mm(ATMOS_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type capacity_mm(capacity_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_GR4J(ATMOS_potentialEvatrans_mm, water_mm, capacity_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_GR4J(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_GR4J_try(ATMOS_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_UBC
arma::vec evatransActual_UBC(const arma::vec& ATMOS_potentialEvatrans_mm, const arma::vec& water_mm, const arma::vec& capacity_mm, const arma::vec& param_EVATRANS_ubc_gamma);
static SEXP _HydroGallery_evatransActual_UBC_try(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_ubc_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_potentialEvatrans_mm(ATMOS_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_EVATRANS_ubc_gamma(param_EVATRANS_ubc_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_UBC(ATMOS_potentialEvatrans_mm, water_mm, capacity_mm, param_EVATRANS_ubc_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_UBC(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_ubc_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_UBC_try(ATMOS_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_EVATRANS_ubc_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_LiangLand
arma::vec evatransActual_LiangLand(const arma::vec& ATMOS_potentialEvatrans_mm, const arma::vec& water_mm, const arma::vec& capacity_mm, const arma::vec& param_EVATRANS_lia_gamma);
static SEXP _HydroGallery_evatransActual_LiangLand_try(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_lia_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_potentialEvatrans_mm(ATMOS_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_EVATRANS_lia_gamma(param_EVATRANS_lia_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_LiangLand(ATMOS_potentialEvatrans_mm, water_mm, capacity_mm, param_EVATRANS_lia_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_LiangLand(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_lia_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_LiangLand_try(ATMOS_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_EVATRANS_lia_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_LiangSoil
arma::vec evatransActual_LiangSoil(const arma::vec& ATMOS_potentialEvatrans_mm, const arma::vec& water_mm, const arma::vec& capacity_mm, const arma::vec& param_EVATRANS_lia_B);
static SEXP _HydroGallery_evatransActual_LiangSoil_try(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_lia_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_potentialEvatrans_mm(ATMOS_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_EVATRANS_lia_B(param_EVATRANS_lia_BSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_LiangSoil(ATMOS_potentialEvatrans_mm, water_mm, capacity_mm, param_EVATRANS_lia_B));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_LiangSoil(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_lia_BSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_LiangSoil_try(ATMOS_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_EVATRANS_lia_BSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_WaterGAP3
arma::vec evatransActual_WaterGAP3(const arma::vec& ATMOS_potentialEvatrans_mm, const arma::vec& water_mm, const arma::vec& capacity_mm, const arma::vec& param_EVATRANS_wat_petmax);
static SEXP _HydroGallery_evatransActual_WaterGAP3_try(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_wat_petmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_potentialEvatrans_mm(ATMOS_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_EVATRANS_wat_petmax(param_EVATRANS_wat_petmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_WaterGAP3(ATMOS_potentialEvatrans_mm, water_mm, capacity_mm, param_EVATRANS_wat_petmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransActual_WaterGAP3(SEXP ATMOS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_EVATRANS_wat_petmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransActual_WaterGAP3_try(ATMOS_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_EVATRANS_wat_petmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransPotential_TurcWendling
arma::vec evatransPotential_TurcWendling(const arma::vec& ATMOS_temperature_Cel, const arma::vec& ATMOS_solarRadiat_MJ, const arma::vec& param_EVATRANS_tur_k);
static SEXP _HydroGallery_evatransPotential_TurcWendling_try(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_solarRadiat_MJSEXP, SEXP param_EVATRANS_tur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_solarRadiat_MJ(ATMOS_solarRadiat_MJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_EVATRANS_tur_k(param_EVATRANS_tur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransPotential_TurcWendling(ATMOS_temperature_Cel, ATMOS_solarRadiat_MJ, param_EVATRANS_tur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransPotential_TurcWendling(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_solarRadiat_MJSEXP, SEXP param_EVATRANS_tur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransPotential_TurcWendling_try(ATMOS_temperature_CelSEXP, ATMOS_solarRadiat_MJSEXP, param_EVATRANS_tur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransPotential_Linacre
arma::vec evatransPotential_Linacre(const arma::vec& ATMOS_temperature_Cel, const arma::vec& ATMOS_relativeHumidity_1, const arma::vec& LAND_latitude_Degree, const arma::vec& LAND_elevation_m, const arma::vec& LAND_albedo_1);
static SEXP _HydroGallery_evatransPotential_Linacre_try(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_relativeHumidity_1SEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP, SEXP LAND_albedo_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_relativeHumidity_1(ATMOS_relativeHumidity_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_latitude_Degree(LAND_latitude_DegreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_elevation_m(LAND_elevation_mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_albedo_1(LAND_albedo_1SEXP);
    rcpp_result_gen = Rcpp::wrap(evatransPotential_Linacre(ATMOS_temperature_Cel, ATMOS_relativeHumidity_1, LAND_latitude_Degree, LAND_elevation_m, LAND_albedo_1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransPotential_Linacre(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_relativeHumidity_1SEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP, SEXP LAND_albedo_1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransPotential_Linacre_try(ATMOS_temperature_CelSEXP, ATMOS_relativeHumidity_1SEXP, LAND_latitude_DegreeSEXP, LAND_elevation_mSEXP, LAND_albedo_1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransPotential_FAO56
arma::vec evatransPotential_FAO56(const arma::vec& ATMOS_temperature_Cel, const arma::vec& ATMOS_vaporPress_hPa, const arma::vec& ATMOS_saturatVaporPress_hPa, const arma::vec& ATMOS_netRadiat_MJ, const arma::vec& ATMOS_windSpeed2m_m_s, const arma::vec& LAND_elevation_m);
static SEXP _HydroGallery_evatransPotential_FAO56_try(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_vaporPress_hPaSEXP, SEXP ATMOS_saturatVaporPress_hPaSEXP, SEXP ATMOS_netRadiat_MJSEXP, SEXP ATMOS_windSpeed2m_m_sSEXP, SEXP LAND_elevation_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_vaporPress_hPa(ATMOS_vaporPress_hPaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_saturatVaporPress_hPa(ATMOS_saturatVaporPress_hPaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_netRadiat_MJ(ATMOS_netRadiat_MJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_windSpeed2m_m_s(ATMOS_windSpeed2m_m_sSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_elevation_m(LAND_elevation_mSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransPotential_FAO56(ATMOS_temperature_Cel, ATMOS_vaporPress_hPa, ATMOS_saturatVaporPress_hPa, ATMOS_netRadiat_MJ, ATMOS_windSpeed2m_m_s, LAND_elevation_m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransPotential_FAO56(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_vaporPress_hPaSEXP, SEXP ATMOS_saturatVaporPress_hPaSEXP, SEXP ATMOS_netRadiat_MJSEXP, SEXP ATMOS_windSpeed2m_m_sSEXP, SEXP LAND_elevation_mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransPotential_FAO56_try(ATMOS_temperature_CelSEXP, ATMOS_vaporPress_hPaSEXP, ATMOS_saturatVaporPress_hPaSEXP, ATMOS_netRadiat_MJSEXP, ATMOS_windSpeed2m_m_sSEXP, LAND_elevation_mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransPotential_PriestleyTaylor
arma::vec evatransPotential_PriestleyTaylor(const arma::vec& ATMOS_temperature_Cel, const arma::vec& ATMOS_netRadiat_MJ, const arma::vec& LAND_elevation_m, const arma::vec& param_EVATRANS_prt_alpha);
static SEXP _HydroGallery_evatransPotential_PriestleyTaylor_try(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_netRadiat_MJSEXP, SEXP LAND_elevation_mSEXP, SEXP param_EVATRANS_prt_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_netRadiat_MJ(ATMOS_netRadiat_MJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_elevation_m(LAND_elevation_mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_EVATRANS_prt_alpha(param_EVATRANS_prt_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransPotential_PriestleyTaylor(ATMOS_temperature_Cel, ATMOS_netRadiat_MJ, LAND_elevation_m, param_EVATRANS_prt_alpha));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_evatransPotential_PriestleyTaylor(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_netRadiat_MJSEXP, SEXP LAND_elevation_mSEXP, SEXP param_EVATRANS_prt_alphaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_evatransPotential_PriestleyTaylor_try(ATMOS_temperature_CelSEXP, ATMOS_netRadiat_MJSEXP, LAND_elevation_mSEXP, param_EVATRANS_prt_alphaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_GR4J
arma::vec infilt_GR4J(const arma::vec& LAND_water_mm, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm);
static SEXP _HydroGallery_infilt_GR4J_try(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_water_mm(LAND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_GR4J(LAND_water_mm, SOIL_water_mm, SOIL_capacity_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_GR4J(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_GR4J_try(LAND_water_mmSEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_UBC
arma::vec infilt_UBC(const arma::vec& LAND_water_mm, const arma::vec& LAND_impermeableFrac_1, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& param_INFILT_ubc_P0AGEN);
static SEXP _HydroGallery_infilt_UBC_try(SEXP LAND_water_mmSEXP, SEXP LAND_impermeableFrac_1SEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_ubc_P0AGENSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_water_mm(LAND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_impermeableFrac_1(LAND_impermeableFrac_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_INFILT_ubc_P0AGEN(param_INFILT_ubc_P0AGENSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_UBC(LAND_water_mm, LAND_impermeableFrac_1, SOIL_water_mm, SOIL_capacity_mm, param_INFILT_ubc_P0AGEN));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_UBC(SEXP LAND_water_mmSEXP, SEXP LAND_impermeableFrac_1SEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_ubc_P0AGENSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_UBC_try(LAND_water_mmSEXP, LAND_impermeableFrac_1SEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, param_INFILT_ubc_P0AGENSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_SupplyRatio
arma::vec infilt_SupplyRatio(const arma::vec& LAND_water_mm, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& param_INFILT_sur_k);
static SEXP _HydroGallery_infilt_SupplyRatio_try(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_sur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_water_mm(LAND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_INFILT_sur_k(param_INFILT_sur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_SupplyRatio(LAND_water_mm, SOIL_water_mm, SOIL_capacity_mm, param_INFILT_sur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_SupplyRatio(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_sur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_SupplyRatio_try(LAND_water_mmSEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, param_INFILT_sur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_AcceptRatio
arma::vec infilt_AcceptRatio(const arma::vec& LAND_water_mm, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& param_INFILT_acr_k);
static SEXP _HydroGallery_infilt_AcceptRatio_try(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_acr_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_water_mm(LAND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_INFILT_acr_k(param_INFILT_acr_kSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_AcceptRatio(LAND_water_mm, SOIL_water_mm, SOIL_capacity_mm, param_INFILT_acr_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_AcceptRatio(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_acr_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_AcceptRatio_try(LAND_water_mmSEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, param_INFILT_acr_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_SupplyPow
arma::vec infilt_SupplyPow(const arma::vec& LAND_water_mm, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& param_INFILT_sup_k, const arma::vec& param_INFILT_sup_gamma);
static SEXP _HydroGallery_infilt_SupplyPow_try(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_sup_kSEXP, SEXP param_INFILT_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_water_mm(LAND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_INFILT_sup_k(param_INFILT_sup_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_INFILT_sup_gamma(param_INFILT_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_SupplyPow(LAND_water_mm, SOIL_water_mm, SOIL_capacity_mm, param_INFILT_sup_k, param_INFILT_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_SupplyPow(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_sup_kSEXP, SEXP param_INFILT_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_SupplyPow_try(LAND_water_mmSEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, param_INFILT_sup_kSEXP, param_INFILT_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_AcceptPow
arma::vec infilt_AcceptPow(const arma::vec& LAND_water_mm, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& param_INFILT_acp_k, const arma::vec& param_INFILT_acp_gamma);
static SEXP _HydroGallery_infilt_AcceptPow_try(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_acp_kSEXP, SEXP param_INFILT_acp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_water_mm(LAND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_INFILT_acp_k(param_INFILT_acp_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_INFILT_acp_gamma(param_INFILT_acp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_AcceptPow(LAND_water_mm, SOIL_water_mm, SOIL_capacity_mm, param_INFILT_acp_k, param_INFILT_acp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_AcceptPow(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_acp_kSEXP, SEXP param_INFILT_acp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_AcceptPow_try(LAND_water_mmSEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, param_INFILT_acp_kSEXP, param_INFILT_acp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_HBV
arma::vec infilt_HBV(const arma::vec& LAND_water_mm, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& param_INFILT_hbv_beta);
static SEXP _HydroGallery_infilt_HBV_try(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_hbv_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_water_mm(LAND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_INFILT_hbv_beta(param_INFILT_hbv_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_HBV(LAND_water_mm, SOIL_water_mm, SOIL_capacity_mm, param_INFILT_hbv_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_HBV(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_hbv_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_HBV_try(LAND_water_mmSEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, param_INFILT_hbv_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_XAJ
arma::vec infilt_XAJ(const arma::vec& LAND_water_mm, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& param_INFILT_xaj_B);
static SEXP _HydroGallery_infilt_XAJ_try(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_xaj_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_water_mm(LAND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_INFILT_xaj_B(param_INFILT_xaj_BSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_XAJ(LAND_water_mm, SOIL_water_mm, SOIL_capacity_mm, param_INFILT_xaj_B));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_XAJ(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_xaj_BSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_XAJ_try(LAND_water_mmSEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, param_INFILT_xaj_BSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_VIC
arma::vec infilt_VIC(const arma::vec& LAND_water_mm, const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& param_INFILT_vic_B);
static SEXP _HydroGallery_infilt_VIC_try(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_vic_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_water_mm(LAND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_INFILT_vic_B(param_INFILT_vic_BSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_VIC(LAND_water_mm, SOIL_water_mm, SOIL_capacity_mm, param_INFILT_vic_B));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_infilt_VIC(SEXP LAND_water_mmSEXP, SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INFILT_vic_BSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_infilt_VIC_try(LAND_water_mmSEXP, SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, param_INFILT_vic_BSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_GR4Jfix
arma::vec inteflow_GR4Jfix(arma::vec SOIL_water_mm, arma::vec SOIL_capacity_mm, arma::vec param_INTEFLOW_grf_k, arma::vec param_INTEFLOW_grf_gamma);
static SEXP _HydroGallery_inteflow_GR4Jfix_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INTEFLOW_grf_kSEXP, SEXP param_INTEFLOW_grf_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_INTEFLOW_grf_k(param_INTEFLOW_grf_kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_INTEFLOW_grf_gamma(param_INTEFLOW_grf_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_GR4Jfix(SOIL_water_mm, SOIL_capacity_mm, param_INTEFLOW_grf_k, param_INTEFLOW_grf_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_GR4Jfix(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INTEFLOW_grf_kSEXP, SEXP param_INTEFLOW_grf_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_GR4Jfix_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, param_INTEFLOW_grf_kSEXP, param_INTEFLOW_grf_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_MaxPow
arma::vec inteflow_MaxPow(arma::vec SOIL_water_mm, arma::vec SOIL_capacity_mm, arma::vec SOIL_potentialInteflow_mm, arma::vec param_INTEFLOW_map_gamma);
static SEXP _HydroGallery_inteflow_MaxPow_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialInteflow_mmSEXP, SEXP param_INTEFLOW_map_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_potentialInteflow_mm(SOIL_potentialInteflow_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_INTEFLOW_map_gamma(param_INTEFLOW_map_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_MaxPow(SOIL_water_mm, SOIL_capacity_mm, SOIL_potentialInteflow_mm, param_INTEFLOW_map_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_MaxPow(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialInteflow_mmSEXP, SEXP param_INTEFLOW_map_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_MaxPow_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, SOIL_potentialInteflow_mmSEXP, param_INTEFLOW_map_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_ThreshPow
arma::vec inteflow_ThreshPow(arma::vec SOIL_water_mm, arma::vec SOIL_capacity_mm, arma::vec SOIL_potentialInteflow_mm, arma::vec param_INTEFLOW_thp_thresh, arma::vec param_INTEFLOW_thp_gamma);
static SEXP _HydroGallery_inteflow_ThreshPow_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialInteflow_mmSEXP, SEXP param_INTEFLOW_thp_threshSEXP, SEXP param_INTEFLOW_thp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_potentialInteflow_mm(SOIL_potentialInteflow_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_INTEFLOW_thp_thresh(param_INTEFLOW_thp_threshSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_INTEFLOW_thp_gamma(param_INTEFLOW_thp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_ThreshPow(SOIL_water_mm, SOIL_capacity_mm, SOIL_potentialInteflow_mm, param_INTEFLOW_thp_thresh, param_INTEFLOW_thp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_ThreshPow(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialInteflow_mmSEXP, SEXP param_INTEFLOW_thp_threshSEXP, SEXP param_INTEFLOW_thp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_ThreshPow_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, SOIL_potentialInteflow_mmSEXP, param_INTEFLOW_thp_threshSEXP, param_INTEFLOW_thp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_Arno
arma::vec inteflow_Arno(arma::vec SOIL_water_mm, arma::vec SOIL_capacity_mm, arma::vec SOIL_potentialInteflow_mm, arma::vec param_INTEFLOW_arn_thresh, arma::vec param_INTEFLOW_arn_k);
static SEXP _HydroGallery_inteflow_Arno_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialInteflow_mmSEXP, SEXP param_INTEFLOW_arn_threshSEXP, SEXP param_INTEFLOW_arn_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_potentialInteflow_mm(SOIL_potentialInteflow_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_INTEFLOW_arn_thresh(param_INTEFLOW_arn_threshSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_INTEFLOW_arn_k(param_INTEFLOW_arn_kSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_Arno(SOIL_water_mm, SOIL_capacity_mm, SOIL_potentialInteflow_mm, param_INTEFLOW_arn_thresh, param_INTEFLOW_arn_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_Arno(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialInteflow_mmSEXP, SEXP param_INTEFLOW_arn_threshSEXP, SEXP param_INTEFLOW_arn_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_Arno_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, SOIL_potentialInteflow_mmSEXP, param_INTEFLOW_arn_threshSEXP, param_INTEFLOW_arn_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_BevenWood
arma::vec inteflow_BevenWood(arma::vec SOIL_water_mm, arma::vec SOIL_capacity_mm, arma::vec SOIL_fieldCapacityPerc_1, arma::vec SOIL_potentialInteflow_mm);
static SEXP _HydroGallery_inteflow_BevenWood_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_fieldCapacityPerc_1SEXP, SEXP SOIL_potentialInteflow_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_fieldCapacityPerc_1(SOIL_fieldCapacityPerc_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_potentialInteflow_mm(SOIL_potentialInteflow_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_BevenWood(SOIL_water_mm, SOIL_capacity_mm, SOIL_fieldCapacityPerc_1, SOIL_potentialInteflow_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_BevenWood(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_fieldCapacityPerc_1SEXP, SEXP SOIL_potentialInteflow_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_BevenWood_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, SOIL_fieldCapacityPerc_1SEXP, SOIL_potentialInteflow_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_SupplyPow0
arma::vec inteflow_SupplyPow0(arma::vec SOIL_water_mm, arma::vec param_INTEFLOW_sp0_k, arma::vec param_INTEFLOW_sp0_gamma);
static SEXP _HydroGallery_inteflow_SupplyPow0_try(SEXP SOIL_water_mmSEXP, SEXP param_INTEFLOW_sp0_kSEXP, SEXP param_INTEFLOW_sp0_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_INTEFLOW_sp0_k(param_INTEFLOW_sp0_kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_INTEFLOW_sp0_gamma(param_INTEFLOW_sp0_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_SupplyPow0(SOIL_water_mm, param_INTEFLOW_sp0_k, param_INTEFLOW_sp0_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_SupplyPow0(SEXP SOIL_water_mmSEXP, SEXP param_INTEFLOW_sp0_kSEXP, SEXP param_INTEFLOW_sp0_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_SupplyPow0_try(SOIL_water_mmSEXP, param_INTEFLOW_sp0_kSEXP, param_INTEFLOW_sp0_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_SupplyPow
arma::vec inteflow_SupplyPow(arma::vec SOIL_water_mm, arma::vec SOIL_capacity_mm, arma::vec param_INTEFLOW_sup_k, arma::vec param_INTEFLOW_sup_gamma);
static SEXP _HydroGallery_inteflow_SupplyPow_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INTEFLOW_sup_kSEXP, SEXP param_INTEFLOW_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_INTEFLOW_sup_k(param_INTEFLOW_sup_kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_INTEFLOW_sup_gamma(param_INTEFLOW_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_SupplyPow(SOIL_water_mm, SOIL_capacity_mm, param_INTEFLOW_sup_k, param_INTEFLOW_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_SupplyPow(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_INTEFLOW_sup_kSEXP, SEXP param_INTEFLOW_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_SupplyPow_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, param_INTEFLOW_sup_kSEXP, param_INTEFLOW_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inteflow_SupplyRatio
arma::vec inteflow_SupplyRatio(arma::vec SOIL_water_mm, arma::vec param_INTEFLOW_sur_k);
static SEXP _HydroGallery_inteflow_SupplyRatio_try(SEXP SOIL_water_mmSEXP, SEXP param_INTEFLOW_sur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_INTEFLOW_sur_k(param_INTEFLOW_sur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(inteflow_SupplyRatio(SOIL_water_mm, param_INTEFLOW_sur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_inteflow_SupplyRatio(SEXP SOIL_water_mmSEXP, SEXP param_INTEFLOW_sur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_inteflow_SupplyRatio_try(SOIL_water_mmSEXP, param_INTEFLOW_sur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// intercep_Full
arma::vec intercep_Full(const arma::vec& ATMOS_precipitation_mm, const arma::vec& LAND_interceptWater_mm, const arma::vec& LAND_interceptCapacity_mm);
static SEXP _HydroGallery_intercep_Full_try(SEXP ATMOS_precipitation_mmSEXP, SEXP LAND_interceptWater_mmSEXP, SEXP LAND_interceptCapacity_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_precipitation_mm(ATMOS_precipitation_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_interceptWater_mm(LAND_interceptWater_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_interceptCapacity_mm(LAND_interceptCapacity_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(intercep_Full(ATMOS_precipitation_mm, LAND_interceptWater_mm, LAND_interceptCapacity_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_intercep_Full(SEXP ATMOS_precipitation_mmSEXP, SEXP LAND_interceptWater_mmSEXP, SEXP LAND_interceptCapacity_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_intercep_Full_try(ATMOS_precipitation_mmSEXP, LAND_interceptWater_mmSEXP, LAND_interceptCapacity_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lakeout_SupplyPow
arma::vec lakeout_SupplyPow(const arma::vec& Lake_water_m3, const arma::vec& Lake_capacity_m3, const arma::vec& param_Lakeout_sup_storeFactor, const arma::vec& param_Lakeout_sup_gamma);
static SEXP _HydroGallery_lakeout_SupplyPow_try(SEXP Lake_water_m3SEXP, SEXP Lake_capacity_m3SEXP, SEXP param_Lakeout_sup_storeFactorSEXP, SEXP param_Lakeout_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Lake_water_m3(Lake_water_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Lake_capacity_m3(Lake_capacity_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_Lakeout_sup_storeFactor(param_Lakeout_sup_storeFactorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_Lakeout_sup_gamma(param_Lakeout_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(lakeout_SupplyPow(Lake_water_m3, Lake_capacity_m3, param_Lakeout_sup_storeFactor, param_Lakeout_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lakeout_SupplyPow(SEXP Lake_water_m3SEXP, SEXP Lake_capacity_m3SEXP, SEXP param_Lakeout_sup_storeFactorSEXP, SEXP param_Lakeout_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lakeout_SupplyPow_try(Lake_water_m3SEXP, Lake_capacity_m3SEXP, param_Lakeout_sup_storeFactorSEXP, param_Lakeout_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lakeevap_Zhao
arma::vec lakeevap_Zhao(const arma::vec& ATMOS_solarRadiat_MJ, const arma::vec& ATMOS_temperature_Cel, const arma::vec& ATMOS_vaporPress_kPa, const arma::vec& ATMOS_windSpeed2m_m_s, const arma::vec& LAND_latitude_Degree, const arma::vec& LAND_elevation_m, arma::vec& Lake_temperature_Cel, arma::vec& Lake_depth_m, const arma::vec& Lake_area_km2, const arma::vec& Lake_fetchLength_m, const arma::vec& Time_dayOfYear);
static SEXP _HydroGallery_lakeevap_Zhao_try(SEXP ATMOS_solarRadiat_MJSEXP, SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_vaporPress_kPaSEXP, SEXP ATMOS_windSpeed2m_m_sSEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP, SEXP Lake_temperature_CelSEXP, SEXP Lake_depth_mSEXP, SEXP Lake_area_km2SEXP, SEXP Lake_fetchLength_mSEXP, SEXP Time_dayOfYearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_solarRadiat_MJ(ATMOS_solarRadiat_MJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_vaporPress_kPa(ATMOS_vaporPress_kPaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_windSpeed2m_m_s(ATMOS_windSpeed2m_m_sSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_latitude_Degree(LAND_latitude_DegreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_elevation_m(LAND_elevation_mSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Lake_temperature_Cel(Lake_temperature_CelSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Lake_depth_m(Lake_depth_mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Lake_area_km2(Lake_area_km2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Lake_fetchLength_m(Lake_fetchLength_mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Time_dayOfYear(Time_dayOfYearSEXP);
    rcpp_result_gen = Rcpp::wrap(lakeevap_Zhao(ATMOS_solarRadiat_MJ, ATMOS_temperature_Cel, ATMOS_vaporPress_kPa, ATMOS_windSpeed2m_m_s, LAND_latitude_Degree, LAND_elevation_m, Lake_temperature_Cel, Lake_depth_m, Lake_area_km2, Lake_fetchLength_m, Time_dayOfYear));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lakeevap_Zhao(SEXP ATMOS_solarRadiat_MJSEXP, SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_vaporPress_kPaSEXP, SEXP ATMOS_windSpeed2m_m_sSEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP, SEXP Lake_temperature_CelSEXP, SEXP Lake_depth_mSEXP, SEXP Lake_area_km2SEXP, SEXP Lake_fetchLength_mSEXP, SEXP Time_dayOfYearSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lakeevap_Zhao_try(ATMOS_solarRadiat_MJSEXP, ATMOS_temperature_CelSEXP, ATMOS_vaporPress_kPaSEXP, ATMOS_windSpeed2m_m_sSEXP, LAND_latitude_DegreeSEXP, LAND_elevation_mSEXP, Lake_temperature_CelSEXP, Lake_depth_mSEXP, Lake_area_km2SEXP, Lake_fetchLength_mSEXP, Time_dayOfYearSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lateral_SupplyPow
arma::vec lateral_SupplyPow(const arma::vec& GROUND_water_mm, const arma::vec& GROUND_capacity_mm, const arma::vec& param_LATERAL_sup_k, const arma::vec& param_LATERAL_sup_gamma);
static SEXP _HydroGallery_lateral_SupplyPow_try(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP param_LATERAL_sup_kSEXP, SEXP param_LATERAL_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_capacity_mm(GROUND_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_LATERAL_sup_k(param_LATERAL_sup_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_LATERAL_sup_gamma(param_LATERAL_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(lateral_SupplyPow(GROUND_water_mm, GROUND_capacity_mm, param_LATERAL_sup_k, param_LATERAL_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lateral_SupplyPow(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP param_LATERAL_sup_kSEXP, SEXP param_LATERAL_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lateral_SupplyPow_try(GROUND_water_mmSEXP, GROUND_capacity_mmSEXP, param_LATERAL_sup_kSEXP, param_LATERAL_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lateral_SupplyRatio
arma::vec lateral_SupplyRatio(const arma::vec& GROUND_water_mm, const arma::vec& param_LATERAL_sur_k);
static SEXP _HydroGallery_lateral_SupplyRatio_try(SEXP GROUND_water_mmSEXP, SEXP param_LATERAL_sur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_LATERAL_sur_k(param_LATERAL_sur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(lateral_SupplyRatio(GROUND_water_mm, param_LATERAL_sur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lateral_SupplyRatio(SEXP GROUND_water_mmSEXP, SEXP param_LATERAL_sur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lateral_SupplyRatio_try(GROUND_water_mmSEXP, param_LATERAL_sur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lateral_GR4J
arma::vec lateral_GR4J(const arma::vec& GROUND_water_mm, const arma::vec& GROUND_capacity_mm, const arma::vec& GROUND_potentialLateral_mm);
static SEXP _HydroGallery_lateral_GR4J_try(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialLateral_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_capacity_mm(GROUND_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_potentialLateral_mm(GROUND_potentialLateral_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(lateral_GR4J(GROUND_water_mm, GROUND_capacity_mm, GROUND_potentialLateral_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lateral_GR4J(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialLateral_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lateral_GR4J_try(GROUND_water_mmSEXP, GROUND_capacity_mmSEXP, GROUND_potentialLateral_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lateral_GR4Jfix
arma::vec lateral_GR4Jfix(const arma::vec& GROUND_water_mm, const arma::vec& GROUND_capacity_mm, const arma::vec& GROUND_potentialLateral_mm, const arma::vec& param_LATERAL_grf_gamma);
static SEXP _HydroGallery_lateral_GR4Jfix_try(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialLateral_mmSEXP, SEXP param_LATERAL_grf_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_capacity_mm(GROUND_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_potentialLateral_mm(GROUND_potentialLateral_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_LATERAL_grf_gamma(param_LATERAL_grf_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(lateral_GR4Jfix(GROUND_water_mm, GROUND_capacity_mm, GROUND_potentialLateral_mm, param_LATERAL_grf_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lateral_GR4Jfix(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialLateral_mmSEXP, SEXP param_LATERAL_grf_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lateral_GR4Jfix_try(GROUND_water_mmSEXP, GROUND_capacity_mmSEXP, GROUND_potentialLateral_mmSEXP, param_LATERAL_grf_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lateral_ThreshPow
arma::vec lateral_ThreshPow(const arma::vec& GROUND_water_mm, const arma::vec& GROUND_capacity_mm, const arma::vec& GROUND_potentialLateral_mm, const arma::vec& param_LATERAL_thp_thresh, const arma::vec& param_LATERAL_thp_gamma);
static SEXP _HydroGallery_lateral_ThreshPow_try(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialLateral_mmSEXP, SEXP param_LATERAL_thp_threshSEXP, SEXP param_LATERAL_thp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_capacity_mm(GROUND_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_potentialLateral_mm(GROUND_potentialLateral_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_LATERAL_thp_thresh(param_LATERAL_thp_threshSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_LATERAL_thp_gamma(param_LATERAL_thp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(lateral_ThreshPow(GROUND_water_mm, GROUND_capacity_mm, GROUND_potentialLateral_mm, param_LATERAL_thp_thresh, param_LATERAL_thp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lateral_ThreshPow(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialLateral_mmSEXP, SEXP param_LATERAL_thp_threshSEXP, SEXP param_LATERAL_thp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lateral_ThreshPow_try(GROUND_water_mmSEXP, GROUND_capacity_mmSEXP, GROUND_potentialLateral_mmSEXP, param_LATERAL_thp_threshSEXP, param_LATERAL_thp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lateral_Arno
arma::vec lateral_Arno(const arma::vec& GROUND_water_mm, const arma::vec& GROUND_capacity_mm, const arma::vec& GROUND_potentialLateral_mm, const arma::vec& param_LATERAL_arn_thresh, const arma::vec& param_LATERAL_arn_k);
static SEXP _HydroGallery_lateral_Arno_try(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialLateral_mmSEXP, SEXP param_LATERAL_arn_threshSEXP, SEXP param_LATERAL_arn_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_water_mm(GROUND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_capacity_mm(GROUND_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GROUND_potentialLateral_mm(GROUND_potentialLateral_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_LATERAL_arn_thresh(param_LATERAL_arn_threshSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_LATERAL_arn_k(param_LATERAL_arn_kSEXP);
    rcpp_result_gen = Rcpp::wrap(lateral_Arno(GROUND_water_mm, GROUND_capacity_mm, GROUND_potentialLateral_mm, param_LATERAL_arn_thresh, param_LATERAL_arn_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_lateral_Arno(SEXP GROUND_water_mmSEXP, SEXP GROUND_capacity_mmSEXP, SEXP GROUND_potentialLateral_mmSEXP, SEXP param_LATERAL_arn_threshSEXP, SEXP param_LATERAL_arn_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_lateral_Arno_try(GROUND_water_mmSEXP, GROUND_capacity_mmSEXP, GROUND_potentialLateral_mmSEXP, param_LATERAL_arn_threshSEXP, param_LATERAL_arn_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_extraterreSolarRadiat_FAO56
arma::vec meteo_extraterreSolarRadiat_FAO56(const arma::vec& Time_dayOfYear_, const arma::vec& LAND_latitude_Degree);
static SEXP _HydroGallery_meteo_extraterreSolarRadiat_FAO56_try(SEXP Time_dayOfYear_SEXP, SEXP LAND_latitude_DegreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Time_dayOfYear_(Time_dayOfYear_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_latitude_Degree(LAND_latitude_DegreeSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_extraterreSolarRadiat_FAO56(Time_dayOfYear_, LAND_latitude_Degree));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_extraterreSolarRadiat_FAO56(SEXP Time_dayOfYear_SEXP, SEXP LAND_latitude_DegreeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_extraterreSolarRadiat_FAO56_try(Time_dayOfYear_SEXP, LAND_latitude_DegreeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_solarRadiatClearSky_FAO56
arma::vec meteo_solarRadiatClearSky_FAO56(const arma::vec& Time_dayOfYear_, const arma::vec& LAND_latitude_Degree, const arma::vec& LAND_elevation_m);
static SEXP _HydroGallery_meteo_solarRadiatClearSky_FAO56_try(SEXP Time_dayOfYear_SEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Time_dayOfYear_(Time_dayOfYear_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_latitude_Degree(LAND_latitude_DegreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_elevation_m(LAND_elevation_mSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_solarRadiatClearSky_FAO56(Time_dayOfYear_, LAND_latitude_Degree, LAND_elevation_m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_solarRadiatClearSky_FAO56(SEXP Time_dayOfYear_SEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_solarRadiatClearSky_FAO56_try(Time_dayOfYear_SEXP, LAND_latitude_DegreeSEXP, LAND_elevation_mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_saturatVaporPress
arma::vec meteo_saturatVaporPress(const arma::vec& ATMOS_temperature_Cel);
static SEXP _HydroGallery_meteo_saturatVaporPress_try(SEXP ATMOS_temperature_CelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_saturatVaporPress(ATMOS_temperature_Cel));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_saturatVaporPress(SEXP ATMOS_temperature_CelSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_saturatVaporPress_try(ATMOS_temperature_CelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_saturatVaporPress_kPa
arma::vec meteo_saturatVaporPress_kPa(const arma::vec& ATMOS_temperature_Cel);
static SEXP _HydroGallery_meteo_saturatVaporPress_kPa_try(SEXP ATMOS_temperature_CelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_saturatVaporPress_kPa(ATMOS_temperature_Cel));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_saturatVaporPress_kPa(SEXP ATMOS_temperature_CelSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_saturatVaporPress_kPa_try(ATMOS_temperature_CelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_vaporPress
arma::vec meteo_vaporPress(const arma::vec& ATMOS_temperature_Cel, const arma::vec& ATMOS_relativeHumidity_1);
static SEXP _HydroGallery_meteo_vaporPress_try(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_relativeHumidity_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_relativeHumidity_1(ATMOS_relativeHumidity_1SEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_vaporPress(ATMOS_temperature_Cel, ATMOS_relativeHumidity_1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_vaporPress(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_relativeHumidity_1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_vaporPress_try(ATMOS_temperature_CelSEXP, ATMOS_relativeHumidity_1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_nettoRadiat_FAO56
arma::vec meteo_nettoRadiat_FAO56(const arma::vec& Time_dayOfYear_, const arma::vec& ATMOS_temperature_Cel, const arma::vec& ATMOS_temperatureMax_Cel, const arma::vec& ATMOS_temperatureMin_Cel, const arma::vec& ATMOS_relativeHumidity_1, const arma::vec& ATMOS_solarRadiat_MJ, const arma::vec& LAND_latitude_Degree, const arma::vec& LAND_elevation_m);
static SEXP _HydroGallery_meteo_nettoRadiat_FAO56_try(SEXP Time_dayOfYear_SEXP, SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_temperatureMax_CelSEXP, SEXP ATMOS_temperatureMin_CelSEXP, SEXP ATMOS_relativeHumidity_1SEXP, SEXP ATMOS_solarRadiat_MJSEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Time_dayOfYear_(Time_dayOfYear_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperatureMax_Cel(ATMOS_temperatureMax_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperatureMin_Cel(ATMOS_temperatureMin_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_relativeHumidity_1(ATMOS_relativeHumidity_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_solarRadiat_MJ(ATMOS_solarRadiat_MJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_latitude_Degree(LAND_latitude_DegreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_elevation_m(LAND_elevation_mSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_nettoRadiat_FAO56(Time_dayOfYear_, ATMOS_temperature_Cel, ATMOS_temperatureMax_Cel, ATMOS_temperatureMin_Cel, ATMOS_relativeHumidity_1, ATMOS_solarRadiat_MJ, LAND_latitude_Degree, LAND_elevation_m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_nettoRadiat_FAO56(SEXP Time_dayOfYear_SEXP, SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_temperatureMax_CelSEXP, SEXP ATMOS_temperatureMin_CelSEXP, SEXP ATMOS_relativeHumidity_1SEXP, SEXP ATMOS_solarRadiat_MJSEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_nettoRadiat_FAO56_try(Time_dayOfYear_SEXP, ATMOS_temperature_CelSEXP, ATMOS_temperatureMax_CelSEXP, ATMOS_temperatureMin_CelSEXP, ATMOS_relativeHumidity_1SEXP, ATMOS_solarRadiat_MJSEXP, LAND_latitude_DegreeSEXP, LAND_elevation_mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_atmosEmissivity_FAO56
arma::vec meteo_atmosEmissivity_FAO56(const arma::vec& Time_dayOfYear_, const arma::vec& ATMOS_temperature_Cel, const arma::vec& ATMOS_relativeHumidity_1, const arma::vec& ATMOS_solarRadiat_MJ, const arma::vec& LAND_latitude_Degree, const arma::vec& LAND_elevation_m);
static SEXP _HydroGallery_meteo_atmosEmissivity_FAO56_try(SEXP Time_dayOfYear_SEXP, SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_relativeHumidity_1SEXP, SEXP ATMOS_solarRadiat_MJSEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Time_dayOfYear_(Time_dayOfYear_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_relativeHumidity_1(ATMOS_relativeHumidity_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_solarRadiat_MJ(ATMOS_solarRadiat_MJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_latitude_Degree(LAND_latitude_DegreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_elevation_m(LAND_elevation_mSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_atmosEmissivity_FAO56(Time_dayOfYear_, ATMOS_temperature_Cel, ATMOS_relativeHumidity_1, ATMOS_solarRadiat_MJ, LAND_latitude_Degree, LAND_elevation_m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_atmosEmissivity_FAO56(SEXP Time_dayOfYear_SEXP, SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_relativeHumidity_1SEXP, SEXP ATMOS_solarRadiat_MJSEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_atmosEmissivity_FAO56_try(Time_dayOfYear_SEXP, ATMOS_temperature_CelSEXP, ATMOS_relativeHumidity_1SEXP, ATMOS_solarRadiat_MJSEXP, LAND_latitude_DegreeSEXP, LAND_elevation_mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_cloudFactor_UNKNOW
arma::vec meteo_cloudFactor_UNKNOW(const arma::vec& ATMOS_solarRadiat_MJ, const arma::vec& Time_dayOfYear_, const arma::vec& LAND_latitude_Degree, const arma::vec& LAND_elevation_m);
static SEXP _HydroGallery_meteo_cloudFactor_UNKNOW_try(SEXP ATMOS_solarRadiat_MJSEXP, SEXP Time_dayOfYear_SEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_solarRadiat_MJ(ATMOS_solarRadiat_MJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Time_dayOfYear_(Time_dayOfYear_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_latitude_Degree(LAND_latitude_DegreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_elevation_m(LAND_elevation_mSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_cloudFactor_UNKNOW(ATMOS_solarRadiat_MJ, Time_dayOfYear_, LAND_latitude_Degree, LAND_elevation_m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_cloudFactor_UNKNOW(SEXP ATMOS_solarRadiat_MJSEXP, SEXP Time_dayOfYear_SEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_cloudFactor_UNKNOW_try(ATMOS_solarRadiat_MJSEXP, Time_dayOfYear_SEXP, LAND_latitude_DegreeSEXP, LAND_elevation_mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_atmosEmissivity_UNKNOW
arma::vec meteo_atmosEmissivity_UNKNOW(const arma::vec& Time_dayOfYear_, const arma::vec& ATMOS_temperature_Cel, const arma::vec& ATMOS_vaporPress_kPa, const arma::vec& ATMOS_solarRadiat_MJ, const arma::vec& LAND_latitude_Degree, const arma::vec& LAND_elevation_m);
static SEXP _HydroGallery_meteo_atmosEmissivity_UNKNOW_try(SEXP Time_dayOfYear_SEXP, SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_vaporPress_kPaSEXP, SEXP ATMOS_solarRadiat_MJSEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Time_dayOfYear_(Time_dayOfYear_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_vaporPress_kPa(ATMOS_vaporPress_kPaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_solarRadiat_MJ(ATMOS_solarRadiat_MJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_latitude_Degree(LAND_latitude_DegreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_elevation_m(LAND_elevation_mSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_atmosEmissivity_UNKNOW(Time_dayOfYear_, ATMOS_temperature_Cel, ATMOS_vaporPress_kPa, ATMOS_solarRadiat_MJ, LAND_latitude_Degree, LAND_elevation_m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_atmosEmissivity_UNKNOW(SEXP Time_dayOfYear_SEXP, SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_vaporPress_kPaSEXP, SEXP ATMOS_solarRadiat_MJSEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_atmosEmissivity_UNKNOW_try(Time_dayOfYear_SEXP, ATMOS_temperature_CelSEXP, ATMOS_vaporPress_kPaSEXP, ATMOS_solarRadiat_MJSEXP, LAND_latitude_DegreeSEXP, LAND_elevation_mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_atmosEmissivity_Idso
arma::vec meteo_atmosEmissivity_Idso(const arma::vec& ATMOS_temperature_Cel);
static SEXP _HydroGallery_meteo_atmosEmissivity_Idso_try(SEXP ATMOS_temperature_CelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_atmosEmissivity_Idso(ATMOS_temperature_Cel));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_atmosEmissivity_Idso(SEXP ATMOS_temperature_CelSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_atmosEmissivity_Idso_try(ATMOS_temperature_CelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_nettoRadiat_WaterGAP3
arma::vec meteo_nettoRadiat_WaterGAP3(const arma::vec& ATMOS_temperature_Cel, const arma::vec& ATMOS_solarRadiat_MJ, const arma::vec& ATMOS_solarRadiatClearSky_MJ, const arma::vec& LAND_albedo_1);
static SEXP _HydroGallery_meteo_nettoRadiat_WaterGAP3_try(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_solarRadiat_MJSEXP, SEXP ATMOS_solarRadiatClearSky_MJSEXP, SEXP LAND_albedo_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_solarRadiat_MJ(ATMOS_solarRadiat_MJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_solarRadiatClearSky_MJ(ATMOS_solarRadiatClearSky_MJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_albedo_1(LAND_albedo_1SEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_nettoRadiat_WaterGAP3(ATMOS_temperature_Cel, ATMOS_solarRadiat_MJ, ATMOS_solarRadiatClearSky_MJ, LAND_albedo_1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_nettoRadiat_WaterGAP3(SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_solarRadiat_MJSEXP, SEXP ATMOS_solarRadiatClearSky_MJSEXP, SEXP LAND_albedo_1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_nettoRadiat_WaterGAP3_try(ATMOS_temperature_CelSEXP, ATMOS_solarRadiat_MJSEXP, ATMOS_solarRadiatClearSky_MJSEXP, LAND_albedo_1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_nettoRadiat_FAO56Simplify
arma::vec meteo_nettoRadiat_FAO56Simplify(const arma::vec& Time_dayOfYear_, const arma::vec& ATMOS_temperature_Cel, const arma::vec& ATMOS_relativeHumidity_1, const arma::vec& ATMOS_solarRadiat_MJ, const arma::vec& LAND_latitude_Degree, const arma::vec& LAND_elevation_m);
static SEXP _HydroGallery_meteo_nettoRadiat_FAO56Simplify_try(SEXP Time_dayOfYear_SEXP, SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_relativeHumidity_1SEXP, SEXP ATMOS_solarRadiat_MJSEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Time_dayOfYear_(Time_dayOfYear_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_relativeHumidity_1(ATMOS_relativeHumidity_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_solarRadiat_MJ(ATMOS_solarRadiat_MJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_latitude_Degree(LAND_latitude_DegreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_elevation_m(LAND_elevation_mSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_nettoRadiat_FAO56Simplify(Time_dayOfYear_, ATMOS_temperature_Cel, ATMOS_relativeHumidity_1, ATMOS_solarRadiat_MJ, LAND_latitude_Degree, LAND_elevation_m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_nettoRadiat_FAO56Simplify(SEXP Time_dayOfYear_SEXP, SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_relativeHumidity_1SEXP, SEXP ATMOS_solarRadiat_MJSEXP, SEXP LAND_latitude_DegreeSEXP, SEXP LAND_elevation_mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_nettoRadiat_FAO56Simplify_try(Time_dayOfYear_SEXP, ATMOS_temperature_CelSEXP, ATMOS_relativeHumidity_1SEXP, ATMOS_solarRadiat_MJSEXP, LAND_latitude_DegreeSEXP, LAND_elevation_mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_windSpeed2m
arma::vec meteo_windSpeed2m(const arma::vec& ATMOS_windSpeed_m_s, const arma::vec& ATMOS_windMeasureHeight_m);
static SEXP _HydroGallery_meteo_windSpeed2m_try(SEXP ATMOS_windSpeed_m_sSEXP, SEXP ATMOS_windMeasureHeight_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_windSpeed_m_s(ATMOS_windSpeed_m_sSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_windMeasureHeight_m(ATMOS_windMeasureHeight_mSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_windSpeed2m(ATMOS_windSpeed_m_s, ATMOS_windMeasureHeight_m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_windSpeed2m(SEXP ATMOS_windSpeed_m_sSEXP, SEXP ATMOS_windMeasureHeight_mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_windSpeed2m_try(ATMOS_windSpeed_m_sSEXP, ATMOS_windMeasureHeight_mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_airDensity
arma::vec meteo_airDensity(const arma::vec& ATMOS_temperature_Cel, const arma::vec& LAND_elevation_m);
static SEXP _HydroGallery_meteo_airDensity_try(SEXP ATMOS_temperature_CelSEXP, SEXP LAND_elevation_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_elevation_m(LAND_elevation_mSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_airDensity(ATMOS_temperature_Cel, LAND_elevation_m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_airDensity(SEXP ATMOS_temperature_CelSEXP, SEXP LAND_elevation_mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_airDensity_try(ATMOS_temperature_CelSEXP, LAND_elevation_mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_saturatDelta
arma::vec meteo_saturatDelta(const arma::vec& ATMOS_temperature_Cel);
static SEXP _HydroGallery_meteo_saturatDelta_try(SEXP ATMOS_temperature_CelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_saturatDelta(ATMOS_temperature_Cel));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_saturatDelta(SEXP ATMOS_temperature_CelSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_saturatDelta_try(ATMOS_temperature_CelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meteo_wetBulbTemperature
arma::vec meteo_wetBulbTemperature(const arma::vec& ATMOS_vaporPress_kPa, const arma::vec& ATMOS_temperature_Cel);
static SEXP _HydroGallery_meteo_wetBulbTemperature_try(SEXP ATMOS_vaporPress_kPaSEXP, SEXP ATMOS_temperature_CelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_vaporPress_kPa(ATMOS_vaporPress_kPaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo_wetBulbTemperature(ATMOS_vaporPress_kPa, ATMOS_temperature_Cel));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_meteo_wetBulbTemperature(SEXP ATMOS_vaporPress_kPaSEXP, SEXP ATMOS_temperature_CelSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_meteo_wetBulbTemperature_try(ATMOS_vaporPress_kPaSEXP, ATMOS_temperature_CelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_GR4J
arma::vec percola_GR4J(const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm);
static SEXP _HydroGallery_percola_GR4J_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_GR4J(SOIL_water_mm, SOIL_capacity_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_GR4J(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_GR4J_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_GR4Jfix
arma::vec percola_GR4Jfix(const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& param_PERCOLA_grf_k);
static SEXP _HydroGallery_percola_GR4Jfix_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_PERCOLA_grf_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_PERCOLA_grf_k(param_PERCOLA_grf_kSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_GR4Jfix(SOIL_water_mm, SOIL_capacity_mm, param_PERCOLA_grf_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_GR4Jfix(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_PERCOLA_grf_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_GR4Jfix_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, param_PERCOLA_grf_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_MaxPow
arma::vec percola_MaxPow(const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& SOIL_potentialPercola_mm, const arma::vec& param_PERCOLA_map_gamma);
static SEXP _HydroGallery_percola_MaxPow_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialPercola_mmSEXP, SEXP param_PERCOLA_map_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_potentialPercola_mm(SOIL_potentialPercola_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_PERCOLA_map_gamma(param_PERCOLA_map_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_MaxPow(SOIL_water_mm, SOIL_capacity_mm, SOIL_potentialPercola_mm, param_PERCOLA_map_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_MaxPow(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialPercola_mmSEXP, SEXP param_PERCOLA_map_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_MaxPow_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, SOIL_potentialPercola_mmSEXP, param_PERCOLA_map_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_ThreshPow
arma::vec percola_ThreshPow(const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& SOIL_potentialPercola_mm, const arma::vec& param_PERCOLA_thp_thresh, const arma::vec& param_PERCOLA_thp_gamma);
static SEXP _HydroGallery_percola_ThreshPow_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialPercola_mmSEXP, SEXP param_PERCOLA_thp_threshSEXP, SEXP param_PERCOLA_thp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_potentialPercola_mm(SOIL_potentialPercola_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_PERCOLA_thp_thresh(param_PERCOLA_thp_threshSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_PERCOLA_thp_gamma(param_PERCOLA_thp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_ThreshPow(SOIL_water_mm, SOIL_capacity_mm, SOIL_potentialPercola_mm, param_PERCOLA_thp_thresh, param_PERCOLA_thp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_ThreshPow(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialPercola_mmSEXP, SEXP param_PERCOLA_thp_threshSEXP, SEXP param_PERCOLA_thp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_ThreshPow_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, SOIL_potentialPercola_mmSEXP, param_PERCOLA_thp_threshSEXP, param_PERCOLA_thp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_Arno
arma::vec percola_Arno(const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& SOIL_potentialPercola_mm, const arma::vec& param_PERCOLA_arn_thresh, const arma::vec& param_PERCOLA_arn_k);
static SEXP _HydroGallery_percola_Arno_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialPercola_mmSEXP, SEXP param_PERCOLA_arn_threshSEXP, SEXP param_PERCOLA_arn_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_potentialPercola_mm(SOIL_potentialPercola_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_PERCOLA_arn_thresh(param_PERCOLA_arn_threshSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_PERCOLA_arn_k(param_PERCOLA_arn_kSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_Arno(SOIL_water_mm, SOIL_capacity_mm, SOIL_potentialPercola_mm, param_PERCOLA_arn_thresh, param_PERCOLA_arn_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_Arno(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_potentialPercola_mmSEXP, SEXP param_PERCOLA_arn_threshSEXP, SEXP param_PERCOLA_arn_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_Arno_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, SOIL_potentialPercola_mmSEXP, param_PERCOLA_arn_threshSEXP, param_PERCOLA_arn_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_BevenWood
arma::vec percola_BevenWood(const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& SOIL_fieldCapacityPerc_1, const arma::vec& SOIL_potentialPercola_mm);
static SEXP _HydroGallery_percola_BevenWood_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_fieldCapacityPerc_1SEXP, SEXP SOIL_potentialPercola_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_fieldCapacityPerc_1(SOIL_fieldCapacityPerc_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_potentialPercola_mm(SOIL_potentialPercola_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_BevenWood(SOIL_water_mm, SOIL_capacity_mm, SOIL_fieldCapacityPerc_1, SOIL_potentialPercola_mm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_BevenWood(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP SOIL_fieldCapacityPerc_1SEXP, SEXP SOIL_potentialPercola_mmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_BevenWood_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, SOIL_fieldCapacityPerc_1SEXP, SOIL_potentialPercola_mmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_SupplyPow
arma::vec percola_SupplyPow(const arma::vec& SOIL_water_mm, const arma::vec& SOIL_capacity_mm, const arma::vec& param_PERCOLA_sup_k, const arma::vec& param_PERCOLA_sup_gamma);
static SEXP _HydroGallery_percola_SupplyPow_try(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_PERCOLA_sup_kSEXP, SEXP param_PERCOLA_sup_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_capacity_mm(SOIL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_PERCOLA_sup_k(param_PERCOLA_sup_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_PERCOLA_sup_gamma(param_PERCOLA_sup_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_SupplyPow(SOIL_water_mm, SOIL_capacity_mm, param_PERCOLA_sup_k, param_PERCOLA_sup_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_SupplyPow(SEXP SOIL_water_mmSEXP, SEXP SOIL_capacity_mmSEXP, SEXP param_PERCOLA_sup_kSEXP, SEXP param_PERCOLA_sup_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_SupplyPow_try(SOIL_water_mmSEXP, SOIL_capacity_mmSEXP, param_PERCOLA_sup_kSEXP, param_PERCOLA_sup_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_SupplyRatio
arma::vec percola_SupplyRatio(const arma::vec& SOIL_water_mm, const arma::vec& param_PERCOLA_sur_k);
static SEXP _HydroGallery_percola_SupplyRatio_try(SEXP SOIL_water_mmSEXP, SEXP param_PERCOLA_sur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_water_mm(SOIL_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_PERCOLA_sur_k(param_PERCOLA_sur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_SupplyRatio(SOIL_water_mm, param_PERCOLA_sur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_SupplyRatio(SEXP SOIL_water_mmSEXP, SEXP param_PERCOLA_sur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_SupplyRatio_try(SOIL_water_mmSEXP, param_PERCOLA_sur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_WaterGAP3
arma::vec percola_WaterGAP3(const arma::vec& LAND_water_mm, const arma::vec& SOIL_potentialPercola_mm, const arma::uvec& param_PERCOLA_wat_01, const arma::vec& param_PERCOLA_wat_thresh, const arma::vec& param_PERCOLA_wat_k);
static SEXP _HydroGallery_percola_WaterGAP3_try(SEXP LAND_water_mmSEXP, SEXP SOIL_potentialPercola_mmSEXP, SEXP param_PERCOLA_wat_01SEXP, SEXP param_PERCOLA_wat_threshSEXP, SEXP param_PERCOLA_wat_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type LAND_water_mm(LAND_water_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SOIL_potentialPercola_mm(SOIL_potentialPercola_mmSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type param_PERCOLA_wat_01(param_PERCOLA_wat_01SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_PERCOLA_wat_thresh(param_PERCOLA_wat_threshSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_PERCOLA_wat_k(param_PERCOLA_wat_kSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_WaterGAP3(LAND_water_mm, SOIL_potentialPercola_mm, param_PERCOLA_wat_01, param_PERCOLA_wat_thresh, param_PERCOLA_wat_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_percola_WaterGAP3(SEXP LAND_water_mmSEXP, SEXP SOIL_potentialPercola_mmSEXP, SEXP param_PERCOLA_wat_01SEXP, SEXP param_PERCOLA_wat_threshSEXP, SEXP param_PERCOLA_wat_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_percola_WaterGAP3_try(LAND_water_mmSEXP, SOIL_potentialPercola_mmSEXP, param_PERCOLA_wat_01SEXP, param_PERCOLA_wat_threshSEXP, param_PERCOLA_wat_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// reservoireleas_Hanasaki
arma::vec reservoireleas_Hanasaki(arma::vec Reservoi_water_m3, const arma::vec& Reservoi_inflow_m3, const arma::vec& Reservoi_demand_m3, const arma::vec& Reservoi_capacity_m3, const arma::vec& Reservoi_meanInflow_m3, const arma::vec& Reservoi_meanDemand_m3, const arma::vec& Reservoi_releaseCoefficient_1, const arma::uvec& Reservoi_isIrrigate_01);
static SEXP _HydroGallery_reservoireleas_Hanasaki_try(SEXP Reservoi_water_m3SEXP, SEXP Reservoi_inflow_m3SEXP, SEXP Reservoi_demand_m3SEXP, SEXP Reservoi_capacity_m3SEXP, SEXP Reservoi_meanInflow_m3SEXP, SEXP Reservoi_meanDemand_m3SEXP, SEXP Reservoi_releaseCoefficient_1SEXP, SEXP Reservoi_isIrrigate_01SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Reservoi_water_m3(Reservoi_water_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_inflow_m3(Reservoi_inflow_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_demand_m3(Reservoi_demand_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_capacity_m3(Reservoi_capacity_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_meanInflow_m3(Reservoi_meanInflow_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_meanDemand_m3(Reservoi_meanDemand_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_releaseCoefficient_1(Reservoi_releaseCoefficient_1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Reservoi_isIrrigate_01(Reservoi_isIrrigate_01SEXP);
    rcpp_result_gen = Rcpp::wrap(reservoireleas_Hanasaki(Reservoi_water_m3, Reservoi_inflow_m3, Reservoi_demand_m3, Reservoi_capacity_m3, Reservoi_meanInflow_m3, Reservoi_meanDemand_m3, Reservoi_releaseCoefficient_1, Reservoi_isIrrigate_01));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_reservoireleas_Hanasaki(SEXP Reservoi_water_m3SEXP, SEXP Reservoi_inflow_m3SEXP, SEXP Reservoi_demand_m3SEXP, SEXP Reservoi_capacity_m3SEXP, SEXP Reservoi_meanInflow_m3SEXP, SEXP Reservoi_meanDemand_m3SEXP, SEXP Reservoi_releaseCoefficient_1SEXP, SEXP Reservoi_isIrrigate_01SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_reservoireleas_Hanasaki_try(Reservoi_water_m3SEXP, Reservoi_inflow_m3SEXP, Reservoi_demand_m3SEXP, Reservoi_capacity_m3SEXP, Reservoi_meanInflow_m3SEXP, Reservoi_meanDemand_m3SEXP, Reservoi_releaseCoefficient_1SEXP, Reservoi_isIrrigate_01SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// reservoiReleasCoefficent_Hanasaki
arma::vec reservoiReleasCoefficent_Hanasaki(const arma::vec& Reservoi_water_m3, const arma::vec& Reservoi_capacity_m3, const arma::vec& Reservoi_releaseCoefficient_1, const arma::uvec& Reservoi_isOperateStart_01, const arma::vec& param_Reservoi_han_alpha);
static SEXP _HydroGallery_reservoiReleasCoefficent_Hanasaki_try(SEXP Reservoi_water_m3SEXP, SEXP Reservoi_capacity_m3SEXP, SEXP Reservoi_releaseCoefficient_1SEXP, SEXP Reservoi_isOperateStart_01SEXP, SEXP param_Reservoi_han_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_water_m3(Reservoi_water_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_capacity_m3(Reservoi_capacity_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Reservoi_releaseCoefficient_1(Reservoi_releaseCoefficient_1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Reservoi_isOperateStart_01(Reservoi_isOperateStart_01SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_Reservoi_han_alpha(param_Reservoi_han_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(reservoiReleasCoefficent_Hanasaki(Reservoi_water_m3, Reservoi_capacity_m3, Reservoi_releaseCoefficient_1, Reservoi_isOperateStart_01, param_Reservoi_han_alpha));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_reservoiReleasCoefficent_Hanasaki(SEXP Reservoi_water_m3SEXP, SEXP Reservoi_capacity_m3SEXP, SEXP Reservoi_releaseCoefficient_1SEXP, SEXP Reservoi_isOperateStart_01SEXP, SEXP param_Reservoi_han_alphaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_reservoiReleasCoefficent_Hanasaki_try(Reservoi_water_m3SEXP, Reservoi_capacity_m3SEXP, Reservoi_releaseCoefficient_1SEXP, Reservoi_isOperateStart_01SEXP, param_Reservoi_han_alphaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// riverout_LinearResorvoir
arma::vec riverout_LinearResorvoir(const arma::vec& RIVER_water_m3, const arma::vec& RIVER_inflow_m3, const arma::vec& RIVER_velocity_km, const arma::vec& RIVER_length_km);
static SEXP _HydroGallery_riverout_LinearResorvoir_try(SEXP RIVER_water_m3SEXP, SEXP RIVER_inflow_m3SEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_length_kmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_water_m3(RIVER_water_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_inflow_m3(RIVER_inflow_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_velocity_km(RIVER_velocity_kmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RIVER_length_km(RIVER_length_kmSEXP);
    rcpp_result_gen = Rcpp::wrap(riverout_LinearResorvoir(RIVER_water_m3, RIVER_inflow_m3, RIVER_velocity_km, RIVER_length_km));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_riverout_LinearResorvoir(SEXP RIVER_water_m3SEXP, SEXP RIVER_inflow_m3SEXP, SEXP RIVER_velocity_kmSEXP, SEXP RIVER_length_kmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_riverout_LinearResorvoir_try(RIVER_water_m3SEXP, RIVER_inflow_m3SEXP, RIVER_velocity_kmSEXP, RIVER_length_kmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// riverlakout_LinearResorvoir
arma::vec riverlakout_LinearResorvoir(const arma::vec& Riverlak_water_m3, const arma::vec& Riverlak_inflow_m3, const arma::vec& Riverlak_capacity_m3, const arma::vec& param_Riverlak_lin_storeFactor);
static SEXP _HydroGallery_riverlakout_LinearResorvoir_try(SEXP Riverlak_water_m3SEXP, SEXP Riverlak_inflow_m3SEXP, SEXP Riverlak_capacity_m3SEXP, SEXP param_Riverlak_lin_storeFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Riverlak_water_m3(Riverlak_water_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Riverlak_inflow_m3(Riverlak_inflow_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Riverlak_capacity_m3(Riverlak_capacity_m3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_Riverlak_lin_storeFactor(param_Riverlak_lin_storeFactorSEXP);
    rcpp_result_gen = Rcpp::wrap(riverlakout_LinearResorvoir(Riverlak_water_m3, Riverlak_inflow_m3, Riverlak_capacity_m3, param_Riverlak_lin_storeFactor));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_riverlakout_LinearResorvoir(SEXP Riverlak_water_m3SEXP, SEXP Riverlak_inflow_m3SEXP, SEXP Riverlak_capacity_m3SEXP, SEXP param_Riverlak_lin_storeFactorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_riverlakout_LinearResorvoir_try(Riverlak_water_m3SEXP, Riverlak_inflow_m3SEXP, Riverlak_capacity_m3SEXP, param_Riverlak_lin_storeFactorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_inflow_cells
std::vector<arma::ivec> get_inflow_cells(const arma::ivec& int_Outflow);
static SEXP _HydroGallery_get_inflow_cells_try(SEXP int_OutflowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type int_Outflow(int_OutflowSEXP);
    rcpp_result_gen = Rcpp::wrap(get_inflow_cells(int_Outflow));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_get_inflow_cells(SEXP int_OutflowSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_get_inflow_cells_try(int_OutflowSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_inflow_lastcell
arma::mat get_inflow_lastcell(const arma::ivec& int_Outflow);
static SEXP _HydroGallery_get_inflow_lastcell_try(SEXP int_OutflowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type int_Outflow(int_OutflowSEXP);
    rcpp_result_gen = Rcpp::wrap(get_inflow_lastcell(int_Outflow));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_get_inflow_lastcell(SEXP int_OutflowSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_get_inflow_lastcell_try(int_OutflowSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_cell_in_basin
arma::ivec get_cell_in_basin(const std::vector<arma::ivec>& lst_Inflow_Cell, int int_OutLet, const arma::ivec& int_TestCell);
static SEXP _HydroGallery_get_cell_in_basin_try(SEXP lst_Inflow_CellSEXP, SEXP int_OutLetSEXP, SEXP int_TestCellSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::ivec>& >::type lst_Inflow_Cell(lst_Inflow_CellSEXP);
    Rcpp::traits::input_parameter< int >::type int_OutLet(int_OutLetSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type int_TestCell(int_TestCellSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cell_in_basin(lst_Inflow_Cell, int_OutLet, int_TestCell));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_get_cell_in_basin(SEXP lst_Inflow_CellSEXP, SEXP int_OutLetSEXP, SEXP int_TestCellSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_get_cell_in_basin_try(lst_Inflow_CellSEXP, int_OutLetSEXP, int_TestCellSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_inter_basin
arma::ivec get_inter_basin(const arma::ivec& int_Cell, const arma::ivec& int_Outflow);
static SEXP _HydroGallery_get_inter_basin_try(SEXP int_CellSEXP, SEXP int_OutflowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type int_Cell(int_CellSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type int_Outflow(int_OutflowSEXP);
    rcpp_result_gen = Rcpp::wrap(get_inter_basin(int_Cell, int_Outflow));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_get_inter_basin(SEXP int_CellSEXP, SEXP int_OutflowSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_get_inter_basin_try(int_CellSEXP, int_OutflowSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_new_outflow
arma::ivec get_new_outflow(const arma::ivec& int_Cell, const arma::ivec& int_Outflow);
static SEXP _HydroGallery_get_new_outflow_try(SEXP int_CellSEXP, SEXP int_OutflowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type int_Cell(int_CellSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type int_Outflow(int_OutflowSEXP);
    rcpp_result_gen = Rcpp::wrap(get_new_outflow(int_Cell, int_Outflow));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_get_new_outflow(SEXP int_CellSEXP, SEXP int_OutflowSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_get_new_outflow_try(int_CellSEXP, int_OutflowSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_cali_step
arma::ivec get_cali_step(const std::vector<arma::ivec>& step_cells, const arma::ivec& int_Cali);
static SEXP _HydroGallery_get_cali_step_try(SEXP step_cellsSEXP, SEXP int_CaliSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::ivec>& >::type step_cells(step_cellsSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type int_Cali(int_CaliSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cali_step(step_cells, int_Cali));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_get_cali_step(SEXP step_cellsSEXP, SEXP int_CaliSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_get_cali_step_try(step_cellsSEXP, int_CaliSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_routing_info
Rcpp::List get_routing_info(const arma::ivec& int_Outflow);
static SEXP _HydroGallery_get_routing_info_try(SEXP int_OutflowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type int_Outflow(int_OutflowSEXP);
    rcpp_result_gen = Rcpp::wrap(get_routing_info(int_Outflow));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_get_routing_info(SEXP int_OutflowSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_get_routing_info_try(int_OutflowSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_upstream_cali_cell
std::vector<arma::ivec> get_upstream_cali_cell(const std::vector<arma::ivec>& lst_Inflow_Cell, const arma::ivec& int_CaliCell);
static SEXP _HydroGallery_get_upstream_cali_cell_try(SEXP lst_Inflow_CellSEXP, SEXP int_CaliCellSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::ivec>& >::type lst_Inflow_Cell(lst_Inflow_CellSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type int_CaliCell(int_CaliCellSEXP);
    rcpp_result_gen = Rcpp::wrap(get_upstream_cali_cell(lst_Inflow_Cell, int_CaliCell));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_get_upstream_cali_cell(SEXP lst_Inflow_CellSEXP, SEXP int_CaliCellSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_get_upstream_cali_cell_try(lst_Inflow_CellSEXP, int_CaliCellSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// write_int_vector_list
void write_int_vector_list(const std::vector<arma::ivec>& vec_list, const std::string& file_path);
static SEXP _HydroGallery_write_int_vector_list_try(SEXP vec_listSEXP, SEXP file_pathSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const std::vector<arma::ivec>& >::type vec_list(vec_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file_path(file_pathSEXP);
    write_int_vector_list(vec_list, file_path);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_write_int_vector_list(SEXP vec_listSEXP, SEXP file_pathSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_write_int_vector_list_try(vec_listSEXP, file_pathSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// read_int_vector_list
std::vector<arma::ivec> read_int_vector_list(const std::string& file_path);
static SEXP _HydroGallery_read_int_vector_list_try(SEXP file_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file_path(file_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(read_int_vector_list(file_path));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_read_int_vector_list(SEXP file_pathSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_read_int_vector_list_try(file_pathSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// write_int_matrix_list
void write_int_matrix_list(const std::vector<arma::imat>& mat_list, const std::string& file_path);
static SEXP _HydroGallery_write_int_matrix_list_try(SEXP mat_listSEXP, SEXP file_pathSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const std::vector<arma::imat>& >::type mat_list(mat_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file_path(file_pathSEXP);
    write_int_matrix_list(mat_list, file_path);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_write_int_matrix_list(SEXP mat_listSEXP, SEXP file_pathSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_write_int_matrix_list_try(mat_listSEXP, file_pathSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// read_int_matrix_list
std::vector<arma::imat> read_int_matrix_list(const std::string& file_path);
static SEXP _HydroGallery_read_int_matrix_list_try(SEXP file_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file_path(file_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(read_int_matrix_list(file_path));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_read_int_matrix_list(SEXP file_pathSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_read_int_matrix_list_try(file_pathSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// snowMelt_Kustas
arma::vec snowMelt_Kustas(const arma::vec& SNOW_ice_mm, const arma::vec& ATMOS_temperature_Cel, const arma::vec& ATMOS_netRadiat_MJ, const arma::vec& param_SNOWMELT_kus_fE, const arma::vec& param_SNOWMELT_kus_fT);
static SEXP _HydroGallery_snowMelt_Kustas_try(SEXP SNOW_ice_mmSEXP, SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_netRadiat_MJSEXP, SEXP param_SNOWMELT_kus_fESEXP, SEXP param_SNOWMELT_kus_fTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type SNOW_ice_mm(SNOW_ice_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_netRadiat_MJ(ATMOS_netRadiat_MJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_SNOWMELT_kus_fE(param_SNOWMELT_kus_fESEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_SNOWMELT_kus_fT(param_SNOWMELT_kus_fTSEXP);
    rcpp_result_gen = Rcpp::wrap(snowMelt_Kustas(SNOW_ice_mm, ATMOS_temperature_Cel, ATMOS_netRadiat_MJ, param_SNOWMELT_kus_fE, param_SNOWMELT_kus_fT));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_snowMelt_Kustas(SEXP SNOW_ice_mmSEXP, SEXP ATMOS_temperature_CelSEXP, SEXP ATMOS_netRadiat_MJSEXP, SEXP param_SNOWMELT_kus_fESEXP, SEXP param_SNOWMELT_kus_fTSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_snowMelt_Kustas_try(SNOW_ice_mmSEXP, ATMOS_temperature_CelSEXP, ATMOS_netRadiat_MJSEXP, param_SNOWMELT_kus_fESEXP, param_SNOWMELT_kus_fTSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// snowMelt_Factor
arma::vec snowMelt_Factor(const arma::vec& SNOW_ice_mm, const arma::vec& ATMOS_temperature_Cel, const arma::vec& param_SNOWMELT_fac_f, const arma::vec& param_SNOWMELT_fac_Tmelt);
static SEXP _HydroGallery_snowMelt_Factor_try(SEXP SNOW_ice_mmSEXP, SEXP ATMOS_temperature_CelSEXP, SEXP param_SNOWMELT_fac_fSEXP, SEXP param_SNOWMELT_fac_TmeltSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type SNOW_ice_mm(SNOW_ice_mmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ATMOS_temperature_Cel(ATMOS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_SNOWMELT_fac_f(param_SNOWMELT_fac_fSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param_SNOWMELT_fac_Tmelt(param_SNOWMELT_fac_TmeltSEXP);
    rcpp_result_gen = Rcpp::wrap(snowMelt_Factor(SNOW_ice_mm, ATMOS_temperature_Cel, param_SNOWMELT_fac_f, param_SNOWMELT_fac_Tmelt));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_snowMelt_Factor(SEXP SNOW_ice_mmSEXP, SEXP ATMOS_temperature_CelSEXP, SEXP param_SNOWMELT_fac_fSEXP, SEXP param_SNOWMELT_fac_TmeltSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_snowMelt_Factor_try(SNOW_ice_mmSEXP, ATMOS_temperature_CelSEXP, param_SNOWMELT_fac_fSEXP, param_SNOWMELT_fac_TmeltSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// withdraw_SingleCell
void withdraw_SingleCell(arma::vec& CELL_withdrawal_m3, arma::vec& CELL_water_m3);
static SEXP _HydroGallery_withdraw_SingleCell_try(SEXP CELL_withdrawal_m3SEXP, SEXP CELL_water_m3SEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< arma::vec& >::type CELL_withdrawal_m3(CELL_withdrawal_m3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type CELL_water_m3(CELL_water_m3SEXP);
    withdraw_SingleCell(CELL_withdrawal_m3, CELL_water_m3);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_withdraw_SingleCell(SEXP CELL_withdrawal_m3SEXP, SEXP CELL_water_m3SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_withdraw_SingleCell_try(CELL_withdrawal_m3SEXP, CELL_water_m3SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// withdrawSurface_AroundMax
void withdrawSurface_AroundMax(arma::vec& CELL_withdrawal_m3, arma::vec& RIVER_water_m3, arma::vec& Lake_water_m3, const arma::imat& CELL_cellNumberAround_int);
static SEXP _HydroGallery_withdrawSurface_AroundMax_try(SEXP CELL_withdrawal_m3SEXP, SEXP RIVER_water_m3SEXP, SEXP Lake_water_m3SEXP, SEXP CELL_cellNumberAround_intSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< arma::vec& >::type CELL_withdrawal_m3(CELL_withdrawal_m3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type RIVER_water_m3(RIVER_water_m3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Lake_water_m3(Lake_water_m3SEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type CELL_cellNumberAround_int(CELL_cellNumberAround_intSEXP);
    withdrawSurface_AroundMax(CELL_withdrawal_m3, RIVER_water_m3, Lake_water_m3, CELL_cellNumberAround_int);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_withdrawSurface_AroundMax(SEXP CELL_withdrawal_m3SEXP, SEXP RIVER_water_m3SEXP, SEXP Lake_water_m3SEXP, SEXP CELL_cellNumberAround_intSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_withdrawSurface_AroundMax_try(CELL_withdrawal_m3SEXP, RIVER_water_m3SEXP, Lake_water_m3SEXP, CELL_cellNumberAround_intSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// withdrawSurface_Around
void withdrawSurface_Around(arma::vec& CELL_withdrawal_m3, arma::vec& RIVER_water_m3, arma::vec& Lake_water_m3, const arma::imat& CELL_cellNumberAround_int);
static SEXP _HydroGallery_withdrawSurface_Around_try(SEXP CELL_withdrawal_m3SEXP, SEXP RIVER_water_m3SEXP, SEXP Lake_water_m3SEXP, SEXP CELL_cellNumberAround_intSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< arma::vec& >::type CELL_withdrawal_m3(CELL_withdrawal_m3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type RIVER_water_m3(RIVER_water_m3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Lake_water_m3(Lake_water_m3SEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type CELL_cellNumberAround_int(CELL_cellNumberAround_intSEXP);
    withdrawSurface_Around(CELL_withdrawal_m3, RIVER_water_m3, Lake_water_m3, CELL_cellNumberAround_int);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_withdrawSurface_Around(SEXP CELL_withdrawal_m3SEXP, SEXP RIVER_water_m3SEXP, SEXP Lake_water_m3SEXP, SEXP CELL_cellNumberAround_intSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_withdrawSurface_Around_try(CELL_withdrawal_m3SEXP, RIVER_water_m3SEXP, Lake_water_m3SEXP, CELL_cellNumberAround_intSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// withdrawSurface_WithdrawNet
void withdrawSurface_WithdrawNet(arma::vec& CELL_withdrawal_m3, arma::vec& RIVER_water_m3, arma::vec& Lake_water_m3, const arma::imat& CELL_cellNumberWithdrawNet_int);
static SEXP _HydroGallery_withdrawSurface_WithdrawNet_try(SEXP CELL_withdrawal_m3SEXP, SEXP RIVER_water_m3SEXP, SEXP Lake_water_m3SEXP, SEXP CELL_cellNumberWithdrawNet_intSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< arma::vec& >::type CELL_withdrawal_m3(CELL_withdrawal_m3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type RIVER_water_m3(RIVER_water_m3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Lake_water_m3(Lake_water_m3SEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type CELL_cellNumberWithdrawNet_int(CELL_cellNumberWithdrawNet_intSEXP);
    withdrawSurface_WithdrawNet(CELL_withdrawal_m3, RIVER_water_m3, Lake_water_m3, CELL_cellNumberWithdrawNet_int);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _HydroGallery_withdrawSurface_WithdrawNet(SEXP CELL_withdrawal_m3SEXP, SEXP RIVER_water_m3SEXP, SEXP Lake_water_m3SEXP, SEXP CELL_cellNumberWithdrawNet_intSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_HydroGallery_withdrawSurface_WithdrawNet_try(CELL_withdrawal_m3SEXP, RIVER_water_m3SEXP, Lake_water_m3SEXP, CELL_cellNumberWithdrawNet_intSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _HydroGallery_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::vec(*atmosSnow_ThresholdT)(const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*atmosSnow_UBC)(const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*baseflow_GR4J)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*baseflow_GR4Jfix)(const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*baseflow_SupplyRatio)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*baseflow_SupplyPow)(const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*baseflow_MaxPow)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*baseflow_ThreshPow)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*baseflow_Arno)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::mat(*landLeafAreaIndex_WaterGAP3)(const arma::mat&,const arma::mat&,const arma::vec&,const arma::ivec&,const arma::vec&,const arma::vec&,const arma::ivec&)");
        signatures.insert("arma::vec(*capirise_HBV)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*capirise_HBVfix)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*capirise_AcceptRatio)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*capirise_AcceptPow)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*confluen_IUH)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*confluen_IUH2S)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*confluen_IUH3S)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*confluenIUH_GR4J1)(double)");
        signatures.insert("arma::vec(*confluenIUH_GR4J2)(double)");
        signatures.insert("arma::vec(*confluenIUH_Kelly)(double,double)");
        signatures.insert("arma::vec(*confluenIUH_Nash)(double,double)");
        signatures.insert("arma::vec(*confluenIUH_Clark)(double)");
        signatures.insert("arma::vec(*confluen_WaterGAP3_H)(arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::field<arma::uvec>&,const arma::field<arma::imat>&)");
        signatures.insert("arma::vec(*confluen_WaterGAP3_N)(arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::field<arma::uvec>&,const arma::field<arma::imat>&,const arma::uvec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*confluen_WaterGAP3_U)(arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::field<arma::uvec>&,const arma::field<arma::imat>&,const arma::uvec&,const arma::vec&,const arma::uvec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::uvec&,const arma::vec&)");
        signatures.insert("void(*save_matbin)(SEXP,const std::string&)");
        signatures.insert("SEXP(*load_matbin)(const std::string&)");
        signatures.insert("void(*bind_matbin)(const StringVector&,const std::string&)");
        signatures.insert("void(*save_vecbin)(SEXP,const std::string&)");
        signatures.insert("SEXP(*load_vecbin)(const std::string&)");
        signatures.insert("arma::vec(*evatransActual_SupplyRatio)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*evatransActual_SupplyPow)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*evatransActual_VIC)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*evatransActual_GR4J)(const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*evatransActual_UBC)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*evatransActual_LiangLand)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*evatransActual_LiangSoil)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*evatransActual_WaterGAP3)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*evatransPotential_TurcWendling)(const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*evatransPotential_Linacre)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*evatransPotential_FAO56)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*evatransPotential_PriestleyTaylor)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*infilt_GR4J)(const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*infilt_UBC)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*infilt_SupplyRatio)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*infilt_AcceptRatio)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*infilt_SupplyPow)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*infilt_AcceptPow)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*infilt_HBV)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*infilt_XAJ)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*infilt_VIC)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*inteflow_GR4Jfix)(arma::vec,arma::vec,arma::vec,arma::vec)");
        signatures.insert("arma::vec(*inteflow_MaxPow)(arma::vec,arma::vec,arma::vec,arma::vec)");
        signatures.insert("arma::vec(*inteflow_ThreshPow)(arma::vec,arma::vec,arma::vec,arma::vec,arma::vec)");
        signatures.insert("arma::vec(*inteflow_Arno)(arma::vec,arma::vec,arma::vec,arma::vec,arma::vec)");
        signatures.insert("arma::vec(*inteflow_BevenWood)(arma::vec,arma::vec,arma::vec,arma::vec)");
        signatures.insert("arma::vec(*inteflow_SupplyPow0)(arma::vec,arma::vec,arma::vec)");
        signatures.insert("arma::vec(*inteflow_SupplyPow)(arma::vec,arma::vec,arma::vec,arma::vec)");
        signatures.insert("arma::vec(*inteflow_SupplyRatio)(arma::vec,arma::vec)");
        signatures.insert("arma::vec(*intercep_Full)(const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*lakeout_SupplyPow)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*lakeevap_Zhao)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,arma::vec&,arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*lateral_SupplyPow)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*lateral_SupplyRatio)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*lateral_GR4J)(const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*lateral_GR4Jfix)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*lateral_ThreshPow)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*lateral_Arno)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*meteo_extraterreSolarRadiat_FAO56)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*meteo_solarRadiatClearSky_FAO56)(const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*meteo_saturatVaporPress)(const arma::vec&)");
        signatures.insert("arma::vec(*meteo_saturatVaporPress_kPa)(const arma::vec&)");
        signatures.insert("arma::vec(*meteo_vaporPress)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*meteo_nettoRadiat_FAO56)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*meteo_atmosEmissivity_FAO56)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*meteo_cloudFactor_UNKNOW)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*meteo_atmosEmissivity_UNKNOW)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*meteo_atmosEmissivity_Idso)(const arma::vec&)");
        signatures.insert("arma::vec(*meteo_nettoRadiat_WaterGAP3)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*meteo_nettoRadiat_FAO56Simplify)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*meteo_windSpeed2m)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*meteo_airDensity)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*meteo_saturatDelta)(const arma::vec&)");
        signatures.insert("arma::vec(*meteo_wetBulbTemperature)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*percola_GR4J)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*percola_GR4Jfix)(const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*percola_MaxPow)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*percola_ThreshPow)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*percola_Arno)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*percola_BevenWood)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*percola_SupplyPow)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*percola_SupplyRatio)(const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*percola_WaterGAP3)(const arma::vec&,const arma::vec&,const arma::uvec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*reservoireleas_Hanasaki)(arma::vec,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::uvec&)");
        signatures.insert("arma::vec(*reservoiReleasCoefficent_Hanasaki)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::uvec&,const arma::vec&)");
        signatures.insert("arma::vec(*riverout_LinearResorvoir)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*riverlakout_LinearResorvoir)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("std::vector<arma::ivec>(*get_inflow_cells)(const arma::ivec&)");
        signatures.insert("arma::mat(*get_inflow_lastcell)(const arma::ivec&)");
        signatures.insert("arma::ivec(*get_cell_in_basin)(const std::vector<arma::ivec>&,int,const arma::ivec&)");
        signatures.insert("arma::ivec(*get_inter_basin)(const arma::ivec&,const arma::ivec&)");
        signatures.insert("arma::ivec(*get_new_outflow)(const arma::ivec&,const arma::ivec&)");
        signatures.insert("arma::ivec(*get_cali_step)(const std::vector<arma::ivec>&,const arma::ivec&)");
        signatures.insert("Rcpp::List(*get_routing_info)(const arma::ivec&)");
        signatures.insert("std::vector<arma::ivec>(*get_upstream_cali_cell)(const std::vector<arma::ivec>&,const arma::ivec&)");
        signatures.insert("void(*write_int_vector_list)(const std::vector<arma::ivec>&,const std::string&)");
        signatures.insert("std::vector<arma::ivec>(*read_int_vector_list)(const std::string&)");
        signatures.insert("void(*write_int_matrix_list)(const std::vector<arma::imat>&,const std::string&)");
        signatures.insert("std::vector<arma::imat>(*read_int_matrix_list)(const std::string&)");
        signatures.insert("arma::vec(*snowMelt_Kustas)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("arma::vec(*snowMelt_Factor)(const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&)");
        signatures.insert("void(*withdraw_SingleCell)(arma::vec&,arma::vec&)");
        signatures.insert("void(*withdrawSurface_AroundMax)(arma::vec&,arma::vec&,arma::vec&,const arma::imat&)");
        signatures.insert("void(*withdrawSurface_Around)(arma::vec&,arma::vec&,arma::vec&,const arma::imat&)");
        signatures.insert("void(*withdrawSurface_WithdrawNet)(arma::vec&,arma::vec&,arma::vec&,const arma::imat&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _HydroGallery_RcppExport_registerCCallable() { 
    R_RegisterCCallable("HydroGallery", "_HydroGallery_atmosSnow_ThresholdT", (DL_FUNC)_HydroGallery_atmosSnow_ThresholdT_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_atmosSnow_UBC", (DL_FUNC)_HydroGallery_atmosSnow_UBC_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_GR4J", (DL_FUNC)_HydroGallery_baseflow_GR4J_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_GR4Jfix", (DL_FUNC)_HydroGallery_baseflow_GR4Jfix_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_SupplyRatio", (DL_FUNC)_HydroGallery_baseflow_SupplyRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_SupplyPow", (DL_FUNC)_HydroGallery_baseflow_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_MaxPow", (DL_FUNC)_HydroGallery_baseflow_MaxPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_ThreshPow", (DL_FUNC)_HydroGallery_baseflow_ThreshPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_baseflow_Arno", (DL_FUNC)_HydroGallery_baseflow_Arno_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_landLeafAreaIndex_WaterGAP3", (DL_FUNC)_HydroGallery_landLeafAreaIndex_WaterGAP3_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_capirise_HBV", (DL_FUNC)_HydroGallery_capirise_HBV_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_capirise_HBVfix", (DL_FUNC)_HydroGallery_capirise_HBVfix_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_capirise_AcceptRatio", (DL_FUNC)_HydroGallery_capirise_AcceptRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_capirise_AcceptPow", (DL_FUNC)_HydroGallery_capirise_AcceptPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluen_IUH", (DL_FUNC)_HydroGallery_confluen_IUH_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluen_IUH2S", (DL_FUNC)_HydroGallery_confluen_IUH2S_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluen_IUH3S", (DL_FUNC)_HydroGallery_confluen_IUH3S_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluenIUH_GR4J1", (DL_FUNC)_HydroGallery_confluenIUH_GR4J1_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluenIUH_GR4J2", (DL_FUNC)_HydroGallery_confluenIUH_GR4J2_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluenIUH_Kelly", (DL_FUNC)_HydroGallery_confluenIUH_Kelly_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluenIUH_Nash", (DL_FUNC)_HydroGallery_confluenIUH_Nash_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluenIUH_Clark", (DL_FUNC)_HydroGallery_confluenIUH_Clark_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluen_WaterGAP3_H", (DL_FUNC)_HydroGallery_confluen_WaterGAP3_H_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluen_WaterGAP3_N", (DL_FUNC)_HydroGallery_confluen_WaterGAP3_N_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_confluen_WaterGAP3_U", (DL_FUNC)_HydroGallery_confluen_WaterGAP3_U_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_save_matbin", (DL_FUNC)_HydroGallery_save_matbin_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_load_matbin", (DL_FUNC)_HydroGallery_load_matbin_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_bind_matbin", (DL_FUNC)_HydroGallery_bind_matbin_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_save_vecbin", (DL_FUNC)_HydroGallery_save_vecbin_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_load_vecbin", (DL_FUNC)_HydroGallery_load_vecbin_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_SupplyRatio", (DL_FUNC)_HydroGallery_evatransActual_SupplyRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_SupplyPow", (DL_FUNC)_HydroGallery_evatransActual_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_VIC", (DL_FUNC)_HydroGallery_evatransActual_VIC_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_GR4J", (DL_FUNC)_HydroGallery_evatransActual_GR4J_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_UBC", (DL_FUNC)_HydroGallery_evatransActual_UBC_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_LiangLand", (DL_FUNC)_HydroGallery_evatransActual_LiangLand_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_LiangSoil", (DL_FUNC)_HydroGallery_evatransActual_LiangSoil_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransActual_WaterGAP3", (DL_FUNC)_HydroGallery_evatransActual_WaterGAP3_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransPotential_TurcWendling", (DL_FUNC)_HydroGallery_evatransPotential_TurcWendling_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransPotential_Linacre", (DL_FUNC)_HydroGallery_evatransPotential_Linacre_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransPotential_FAO56", (DL_FUNC)_HydroGallery_evatransPotential_FAO56_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_evatransPotential_PriestleyTaylor", (DL_FUNC)_HydroGallery_evatransPotential_PriestleyTaylor_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_GR4J", (DL_FUNC)_HydroGallery_infilt_GR4J_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_UBC", (DL_FUNC)_HydroGallery_infilt_UBC_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_SupplyRatio", (DL_FUNC)_HydroGallery_infilt_SupplyRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_AcceptRatio", (DL_FUNC)_HydroGallery_infilt_AcceptRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_SupplyPow", (DL_FUNC)_HydroGallery_infilt_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_AcceptPow", (DL_FUNC)_HydroGallery_infilt_AcceptPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_HBV", (DL_FUNC)_HydroGallery_infilt_HBV_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_XAJ", (DL_FUNC)_HydroGallery_infilt_XAJ_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_infilt_VIC", (DL_FUNC)_HydroGallery_infilt_VIC_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_GR4Jfix", (DL_FUNC)_HydroGallery_inteflow_GR4Jfix_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_MaxPow", (DL_FUNC)_HydroGallery_inteflow_MaxPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_ThreshPow", (DL_FUNC)_HydroGallery_inteflow_ThreshPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_Arno", (DL_FUNC)_HydroGallery_inteflow_Arno_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_BevenWood", (DL_FUNC)_HydroGallery_inteflow_BevenWood_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_SupplyPow0", (DL_FUNC)_HydroGallery_inteflow_SupplyPow0_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_SupplyPow", (DL_FUNC)_HydroGallery_inteflow_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_inteflow_SupplyRatio", (DL_FUNC)_HydroGallery_inteflow_SupplyRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_intercep_Full", (DL_FUNC)_HydroGallery_intercep_Full_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lakeout_SupplyPow", (DL_FUNC)_HydroGallery_lakeout_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lakeevap_Zhao", (DL_FUNC)_HydroGallery_lakeevap_Zhao_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lateral_SupplyPow", (DL_FUNC)_HydroGallery_lateral_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lateral_SupplyRatio", (DL_FUNC)_HydroGallery_lateral_SupplyRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lateral_GR4J", (DL_FUNC)_HydroGallery_lateral_GR4J_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lateral_GR4Jfix", (DL_FUNC)_HydroGallery_lateral_GR4Jfix_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lateral_ThreshPow", (DL_FUNC)_HydroGallery_lateral_ThreshPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_lateral_Arno", (DL_FUNC)_HydroGallery_lateral_Arno_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_extraterreSolarRadiat_FAO56", (DL_FUNC)_HydroGallery_meteo_extraterreSolarRadiat_FAO56_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_solarRadiatClearSky_FAO56", (DL_FUNC)_HydroGallery_meteo_solarRadiatClearSky_FAO56_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_saturatVaporPress", (DL_FUNC)_HydroGallery_meteo_saturatVaporPress_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_saturatVaporPress_kPa", (DL_FUNC)_HydroGallery_meteo_saturatVaporPress_kPa_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_vaporPress", (DL_FUNC)_HydroGallery_meteo_vaporPress_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_nettoRadiat_FAO56", (DL_FUNC)_HydroGallery_meteo_nettoRadiat_FAO56_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_atmosEmissivity_FAO56", (DL_FUNC)_HydroGallery_meteo_atmosEmissivity_FAO56_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_cloudFactor_UNKNOW", (DL_FUNC)_HydroGallery_meteo_cloudFactor_UNKNOW_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_atmosEmissivity_UNKNOW", (DL_FUNC)_HydroGallery_meteo_atmosEmissivity_UNKNOW_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_atmosEmissivity_Idso", (DL_FUNC)_HydroGallery_meteo_atmosEmissivity_Idso_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_nettoRadiat_WaterGAP3", (DL_FUNC)_HydroGallery_meteo_nettoRadiat_WaterGAP3_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_nettoRadiat_FAO56Simplify", (DL_FUNC)_HydroGallery_meteo_nettoRadiat_FAO56Simplify_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_windSpeed2m", (DL_FUNC)_HydroGallery_meteo_windSpeed2m_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_airDensity", (DL_FUNC)_HydroGallery_meteo_airDensity_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_saturatDelta", (DL_FUNC)_HydroGallery_meteo_saturatDelta_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_meteo_wetBulbTemperature", (DL_FUNC)_HydroGallery_meteo_wetBulbTemperature_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_GR4J", (DL_FUNC)_HydroGallery_percola_GR4J_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_GR4Jfix", (DL_FUNC)_HydroGallery_percola_GR4Jfix_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_MaxPow", (DL_FUNC)_HydroGallery_percola_MaxPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_ThreshPow", (DL_FUNC)_HydroGallery_percola_ThreshPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_Arno", (DL_FUNC)_HydroGallery_percola_Arno_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_BevenWood", (DL_FUNC)_HydroGallery_percola_BevenWood_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_SupplyPow", (DL_FUNC)_HydroGallery_percola_SupplyPow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_SupplyRatio", (DL_FUNC)_HydroGallery_percola_SupplyRatio_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_percola_WaterGAP3", (DL_FUNC)_HydroGallery_percola_WaterGAP3_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_reservoireleas_Hanasaki", (DL_FUNC)_HydroGallery_reservoireleas_Hanasaki_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_reservoiReleasCoefficent_Hanasaki", (DL_FUNC)_HydroGallery_reservoiReleasCoefficent_Hanasaki_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_riverout_LinearResorvoir", (DL_FUNC)_HydroGallery_riverout_LinearResorvoir_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_riverlakout_LinearResorvoir", (DL_FUNC)_HydroGallery_riverlakout_LinearResorvoir_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_get_inflow_cells", (DL_FUNC)_HydroGallery_get_inflow_cells_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_get_inflow_lastcell", (DL_FUNC)_HydroGallery_get_inflow_lastcell_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_get_cell_in_basin", (DL_FUNC)_HydroGallery_get_cell_in_basin_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_get_inter_basin", (DL_FUNC)_HydroGallery_get_inter_basin_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_get_new_outflow", (DL_FUNC)_HydroGallery_get_new_outflow_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_get_cali_step", (DL_FUNC)_HydroGallery_get_cali_step_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_get_routing_info", (DL_FUNC)_HydroGallery_get_routing_info_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_get_upstream_cali_cell", (DL_FUNC)_HydroGallery_get_upstream_cali_cell_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_write_int_vector_list", (DL_FUNC)_HydroGallery_write_int_vector_list_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_read_int_vector_list", (DL_FUNC)_HydroGallery_read_int_vector_list_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_write_int_matrix_list", (DL_FUNC)_HydroGallery_write_int_matrix_list_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_read_int_matrix_list", (DL_FUNC)_HydroGallery_read_int_matrix_list_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_snowMelt_Kustas", (DL_FUNC)_HydroGallery_snowMelt_Kustas_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_snowMelt_Factor", (DL_FUNC)_HydroGallery_snowMelt_Factor_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_withdraw_SingleCell", (DL_FUNC)_HydroGallery_withdraw_SingleCell_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_withdrawSurface_AroundMax", (DL_FUNC)_HydroGallery_withdrawSurface_AroundMax_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_withdrawSurface_Around", (DL_FUNC)_HydroGallery_withdrawSurface_Around_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_withdrawSurface_WithdrawNet", (DL_FUNC)_HydroGallery_withdrawSurface_WithdrawNet_try);
    R_RegisterCCallable("HydroGallery", "_HydroGallery_RcppExport_validate", (DL_FUNC)_HydroGallery_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_HydroGallery_atmosSnow_ThresholdT", (DL_FUNC) &_HydroGallery_atmosSnow_ThresholdT, 3},
    {"_HydroGallery_atmosSnow_UBC", (DL_FUNC) &_HydroGallery_atmosSnow_UBC, 3},
    {"_HydroGallery_baseflow_GR4J", (DL_FUNC) &_HydroGallery_baseflow_GR4J, 2},
    {"_HydroGallery_baseflow_GR4Jfix", (DL_FUNC) &_HydroGallery_baseflow_GR4Jfix, 3},
    {"_HydroGallery_baseflow_SupplyRatio", (DL_FUNC) &_HydroGallery_baseflow_SupplyRatio, 2},
    {"_HydroGallery_baseflow_SupplyPow", (DL_FUNC) &_HydroGallery_baseflow_SupplyPow, 3},
    {"_HydroGallery_baseflow_MaxPow", (DL_FUNC) &_HydroGallery_baseflow_MaxPow, 4},
    {"_HydroGallery_baseflow_ThreshPow", (DL_FUNC) &_HydroGallery_baseflow_ThreshPow, 5},
    {"_HydroGallery_baseflow_Arno", (DL_FUNC) &_HydroGallery_baseflow_Arno, 5},
    {"_HydroGallery_landLeafAreaIndex_WaterGAP3", (DL_FUNC) &_HydroGallery_landLeafAreaIndex_WaterGAP3, 7},
    {"_HydroGallery_capirise_HBV", (DL_FUNC) &_HydroGallery_capirise_HBV, 4},
    {"_HydroGallery_capirise_HBVfix", (DL_FUNC) &_HydroGallery_capirise_HBVfix, 5},
    {"_HydroGallery_capirise_AcceptRatio", (DL_FUNC) &_HydroGallery_capirise_AcceptRatio, 5},
    {"_HydroGallery_capirise_AcceptPow", (DL_FUNC) &_HydroGallery_capirise_AcceptPow, 6},
    {"_HydroGallery_confluen_IUH", (DL_FUNC) &_HydroGallery_confluen_IUH, 2},
    {"_HydroGallery_confluen_IUH2S", (DL_FUNC) &_HydroGallery_confluen_IUH2S, 4},
    {"_HydroGallery_confluen_IUH3S", (DL_FUNC) &_HydroGallery_confluen_IUH3S, 6},
    {"_HydroGallery_confluenIUH_GR4J1", (DL_FUNC) &_HydroGallery_confluenIUH_GR4J1, 1},
    {"_HydroGallery_confluenIUH_GR4J2", (DL_FUNC) &_HydroGallery_confluenIUH_GR4J2, 1},
    {"_HydroGallery_confluenIUH_Kelly", (DL_FUNC) &_HydroGallery_confluenIUH_Kelly, 2},
    {"_HydroGallery_confluenIUH_Nash", (DL_FUNC) &_HydroGallery_confluenIUH_Nash, 2},
    {"_HydroGallery_confluenIUH_Clark", (DL_FUNC) &_HydroGallery_confluenIUH_Clark, 1},
    {"_HydroGallery_confluen_WaterGAP3_H", (DL_FUNC) &_HydroGallery_confluen_WaterGAP3_H, 6},
    {"_HydroGallery_confluen_WaterGAP3_N", (DL_FUNC) &_HydroGallery_confluen_WaterGAP3_N, 9},
    {"_HydroGallery_confluen_WaterGAP3_U", (DL_FUNC) &_HydroGallery_confluen_WaterGAP3_U, 16},
    {"_HydroGallery_save_matbin", (DL_FUNC) &_HydroGallery_save_matbin, 2},
    {"_HydroGallery_load_matbin", (DL_FUNC) &_HydroGallery_load_matbin, 1},
    {"_HydroGallery_bind_matbin", (DL_FUNC) &_HydroGallery_bind_matbin, 2},
    {"_HydroGallery_save_vecbin", (DL_FUNC) &_HydroGallery_save_vecbin, 2},
    {"_HydroGallery_load_vecbin", (DL_FUNC) &_HydroGallery_load_vecbin, 1},
    {"_HydroGallery_evatransActual_SupplyRatio", (DL_FUNC) &_HydroGallery_evatransActual_SupplyRatio, 4},
    {"_HydroGallery_evatransActual_SupplyPow", (DL_FUNC) &_HydroGallery_evatransActual_SupplyPow, 5},
    {"_HydroGallery_evatransActual_VIC", (DL_FUNC) &_HydroGallery_evatransActual_VIC, 4},
    {"_HydroGallery_evatransActual_GR4J", (DL_FUNC) &_HydroGallery_evatransActual_GR4J, 3},
    {"_HydroGallery_evatransActual_UBC", (DL_FUNC) &_HydroGallery_evatransActual_UBC, 4},
    {"_HydroGallery_evatransActual_LiangLand", (DL_FUNC) &_HydroGallery_evatransActual_LiangLand, 4},
    {"_HydroGallery_evatransActual_LiangSoil", (DL_FUNC) &_HydroGallery_evatransActual_LiangSoil, 4},
    {"_HydroGallery_evatransActual_WaterGAP3", (DL_FUNC) &_HydroGallery_evatransActual_WaterGAP3, 4},
    {"_HydroGallery_evatransPotential_TurcWendling", (DL_FUNC) &_HydroGallery_evatransPotential_TurcWendling, 3},
    {"_HydroGallery_evatransPotential_Linacre", (DL_FUNC) &_HydroGallery_evatransPotential_Linacre, 5},
    {"_HydroGallery_evatransPotential_FAO56", (DL_FUNC) &_HydroGallery_evatransPotential_FAO56, 6},
    {"_HydroGallery_evatransPotential_PriestleyTaylor", (DL_FUNC) &_HydroGallery_evatransPotential_PriestleyTaylor, 4},
    {"_HydroGallery_infilt_GR4J", (DL_FUNC) &_HydroGallery_infilt_GR4J, 3},
    {"_HydroGallery_infilt_UBC", (DL_FUNC) &_HydroGallery_infilt_UBC, 5},
    {"_HydroGallery_infilt_SupplyRatio", (DL_FUNC) &_HydroGallery_infilt_SupplyRatio, 4},
    {"_HydroGallery_infilt_AcceptRatio", (DL_FUNC) &_HydroGallery_infilt_AcceptRatio, 4},
    {"_HydroGallery_infilt_SupplyPow", (DL_FUNC) &_HydroGallery_infilt_SupplyPow, 5},
    {"_HydroGallery_infilt_AcceptPow", (DL_FUNC) &_HydroGallery_infilt_AcceptPow, 5},
    {"_HydroGallery_infilt_HBV", (DL_FUNC) &_HydroGallery_infilt_HBV, 4},
    {"_HydroGallery_infilt_XAJ", (DL_FUNC) &_HydroGallery_infilt_XAJ, 4},
    {"_HydroGallery_infilt_VIC", (DL_FUNC) &_HydroGallery_infilt_VIC, 4},
    {"_HydroGallery_inteflow_GR4Jfix", (DL_FUNC) &_HydroGallery_inteflow_GR4Jfix, 4},
    {"_HydroGallery_inteflow_MaxPow", (DL_FUNC) &_HydroGallery_inteflow_MaxPow, 4},
    {"_HydroGallery_inteflow_ThreshPow", (DL_FUNC) &_HydroGallery_inteflow_ThreshPow, 5},
    {"_HydroGallery_inteflow_Arno", (DL_FUNC) &_HydroGallery_inteflow_Arno, 5},
    {"_HydroGallery_inteflow_BevenWood", (DL_FUNC) &_HydroGallery_inteflow_BevenWood, 4},
    {"_HydroGallery_inteflow_SupplyPow0", (DL_FUNC) &_HydroGallery_inteflow_SupplyPow0, 3},
    {"_HydroGallery_inteflow_SupplyPow", (DL_FUNC) &_HydroGallery_inteflow_SupplyPow, 4},
    {"_HydroGallery_inteflow_SupplyRatio", (DL_FUNC) &_HydroGallery_inteflow_SupplyRatio, 2},
    {"_HydroGallery_intercep_Full", (DL_FUNC) &_HydroGallery_intercep_Full, 3},
    {"_HydroGallery_lakeout_SupplyPow", (DL_FUNC) &_HydroGallery_lakeout_SupplyPow, 4},
    {"_HydroGallery_lakeevap_Zhao", (DL_FUNC) &_HydroGallery_lakeevap_Zhao, 11},
    {"_HydroGallery_lateral_SupplyPow", (DL_FUNC) &_HydroGallery_lateral_SupplyPow, 4},
    {"_HydroGallery_lateral_SupplyRatio", (DL_FUNC) &_HydroGallery_lateral_SupplyRatio, 2},
    {"_HydroGallery_lateral_GR4J", (DL_FUNC) &_HydroGallery_lateral_GR4J, 3},
    {"_HydroGallery_lateral_GR4Jfix", (DL_FUNC) &_HydroGallery_lateral_GR4Jfix, 4},
    {"_HydroGallery_lateral_ThreshPow", (DL_FUNC) &_HydroGallery_lateral_ThreshPow, 5},
    {"_HydroGallery_lateral_Arno", (DL_FUNC) &_HydroGallery_lateral_Arno, 5},
    {"_HydroGallery_meteo_extraterreSolarRadiat_FAO56", (DL_FUNC) &_HydroGallery_meteo_extraterreSolarRadiat_FAO56, 2},
    {"_HydroGallery_meteo_solarRadiatClearSky_FAO56", (DL_FUNC) &_HydroGallery_meteo_solarRadiatClearSky_FAO56, 3},
    {"_HydroGallery_meteo_saturatVaporPress", (DL_FUNC) &_HydroGallery_meteo_saturatVaporPress, 1},
    {"_HydroGallery_meteo_saturatVaporPress_kPa", (DL_FUNC) &_HydroGallery_meteo_saturatVaporPress_kPa, 1},
    {"_HydroGallery_meteo_vaporPress", (DL_FUNC) &_HydroGallery_meteo_vaporPress, 2},
    {"_HydroGallery_meteo_nettoRadiat_FAO56", (DL_FUNC) &_HydroGallery_meteo_nettoRadiat_FAO56, 8},
    {"_HydroGallery_meteo_atmosEmissivity_FAO56", (DL_FUNC) &_HydroGallery_meteo_atmosEmissivity_FAO56, 6},
    {"_HydroGallery_meteo_cloudFactor_UNKNOW", (DL_FUNC) &_HydroGallery_meteo_cloudFactor_UNKNOW, 4},
    {"_HydroGallery_meteo_atmosEmissivity_UNKNOW", (DL_FUNC) &_HydroGallery_meteo_atmosEmissivity_UNKNOW, 6},
    {"_HydroGallery_meteo_atmosEmissivity_Idso", (DL_FUNC) &_HydroGallery_meteo_atmosEmissivity_Idso, 1},
    {"_HydroGallery_meteo_nettoRadiat_WaterGAP3", (DL_FUNC) &_HydroGallery_meteo_nettoRadiat_WaterGAP3, 4},
    {"_HydroGallery_meteo_nettoRadiat_FAO56Simplify", (DL_FUNC) &_HydroGallery_meteo_nettoRadiat_FAO56Simplify, 6},
    {"_HydroGallery_meteo_windSpeed2m", (DL_FUNC) &_HydroGallery_meteo_windSpeed2m, 2},
    {"_HydroGallery_meteo_airDensity", (DL_FUNC) &_HydroGallery_meteo_airDensity, 2},
    {"_HydroGallery_meteo_saturatDelta", (DL_FUNC) &_HydroGallery_meteo_saturatDelta, 1},
    {"_HydroGallery_meteo_wetBulbTemperature", (DL_FUNC) &_HydroGallery_meteo_wetBulbTemperature, 2},
    {"_HydroGallery_percola_GR4J", (DL_FUNC) &_HydroGallery_percola_GR4J, 2},
    {"_HydroGallery_percola_GR4Jfix", (DL_FUNC) &_HydroGallery_percola_GR4Jfix, 3},
    {"_HydroGallery_percola_MaxPow", (DL_FUNC) &_HydroGallery_percola_MaxPow, 4},
    {"_HydroGallery_percola_ThreshPow", (DL_FUNC) &_HydroGallery_percola_ThreshPow, 5},
    {"_HydroGallery_percola_Arno", (DL_FUNC) &_HydroGallery_percola_Arno, 5},
    {"_HydroGallery_percola_BevenWood", (DL_FUNC) &_HydroGallery_percola_BevenWood, 4},
    {"_HydroGallery_percola_SupplyPow", (DL_FUNC) &_HydroGallery_percola_SupplyPow, 4},
    {"_HydroGallery_percola_SupplyRatio", (DL_FUNC) &_HydroGallery_percola_SupplyRatio, 2},
    {"_HydroGallery_percola_WaterGAP3", (DL_FUNC) &_HydroGallery_percola_WaterGAP3, 5},
    {"_HydroGallery_reservoireleas_Hanasaki", (DL_FUNC) &_HydroGallery_reservoireleas_Hanasaki, 8},
    {"_HydroGallery_reservoiReleasCoefficent_Hanasaki", (DL_FUNC) &_HydroGallery_reservoiReleasCoefficent_Hanasaki, 5},
    {"_HydroGallery_riverout_LinearResorvoir", (DL_FUNC) &_HydroGallery_riverout_LinearResorvoir, 4},
    {"_HydroGallery_riverlakout_LinearResorvoir", (DL_FUNC) &_HydroGallery_riverlakout_LinearResorvoir, 4},
    {"_HydroGallery_get_inflow_cells", (DL_FUNC) &_HydroGallery_get_inflow_cells, 1},
    {"_HydroGallery_get_inflow_lastcell", (DL_FUNC) &_HydroGallery_get_inflow_lastcell, 1},
    {"_HydroGallery_get_cell_in_basin", (DL_FUNC) &_HydroGallery_get_cell_in_basin, 3},
    {"_HydroGallery_get_inter_basin", (DL_FUNC) &_HydroGallery_get_inter_basin, 2},
    {"_HydroGallery_get_new_outflow", (DL_FUNC) &_HydroGallery_get_new_outflow, 2},
    {"_HydroGallery_get_cali_step", (DL_FUNC) &_HydroGallery_get_cali_step, 2},
    {"_HydroGallery_get_routing_info", (DL_FUNC) &_HydroGallery_get_routing_info, 1},
    {"_HydroGallery_get_upstream_cali_cell", (DL_FUNC) &_HydroGallery_get_upstream_cali_cell, 2},
    {"_HydroGallery_write_int_vector_list", (DL_FUNC) &_HydroGallery_write_int_vector_list, 2},
    {"_HydroGallery_read_int_vector_list", (DL_FUNC) &_HydroGallery_read_int_vector_list, 1},
    {"_HydroGallery_write_int_matrix_list", (DL_FUNC) &_HydroGallery_write_int_matrix_list, 2},
    {"_HydroGallery_read_int_matrix_list", (DL_FUNC) &_HydroGallery_read_int_matrix_list, 1},
    {"_HydroGallery_snowMelt_Kustas", (DL_FUNC) &_HydroGallery_snowMelt_Kustas, 5},
    {"_HydroGallery_snowMelt_Factor", (DL_FUNC) &_HydroGallery_snowMelt_Factor, 4},
    {"_HydroGallery_withdraw_SingleCell", (DL_FUNC) &_HydroGallery_withdraw_SingleCell, 2},
    {"_HydroGallery_withdrawSurface_AroundMax", (DL_FUNC) &_HydroGallery_withdrawSurface_AroundMax, 4},
    {"_HydroGallery_withdrawSurface_Around", (DL_FUNC) &_HydroGallery_withdrawSurface_Around, 4},
    {"_HydroGallery_withdrawSurface_WithdrawNet", (DL_FUNC) &_HydroGallery_withdrawSurface_WithdrawNet, 4},
    {"_HydroGallery_RcppExport_registerCCallable", (DL_FUNC) &_HydroGallery_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_HydroGallery(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
